[{"/Users/sutaoliang/live-score/frontend/src/index.tsx":"1","/Users/sutaoliang/live-score/frontend/src/reportWebVitals.ts":"2","/Users/sutaoliang/live-score/frontend/src/App.tsx":"3","/Users/sutaoliang/live-score/frontend/src/context/DateContext.tsx":"4","/Users/sutaoliang/live-score/frontend/src/context/MatchContext.tsx":"5","/Users/sutaoliang/live-score/frontend/src/reducer/dateReducer.tsx":"6","/Users/sutaoliang/live-score/frontend/src/reducer/matchReducer.tsx":"7","/Users/sutaoliang/live-score/frontend/src/pages/index.ts":"8","/Users/sutaoliang/live-score/frontend/src/pages/LeagueInfoPage.tsx":"9","/Users/sutaoliang/live-score/frontend/src/pages/MainPage.tsx":"10","/Users/sutaoliang/live-score/frontend/src/pages/HomePage.tsx":"11","/Users/sutaoliang/live-score/frontend/src/pages/MatchInfoPage.tsx":"12","/Users/sutaoliang/live-score/frontend/src/pages/TeamInfoPage.tsx":"13","/Users/sutaoliang/live-score/frontend/src/api/nba.ts":"14","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/TeamInfo.tsx":"15","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/LeagueInfo.tsx":"16","/Users/sutaoliang/live-score/frontend/src/components/main/Main.tsx":"17","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/dummyMlbTeams.ts":"18","/Users/sutaoliang/live-score/frontend/src/components/main/mobileMenuSection/MobileMenu.tsx":"19","/Users/sutaoliang/live-score/frontend/src/components/header/Navbar.tsx":"20","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/MatchInfo.tsx":"21","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/dummyMlbTeamMatches.ts":"22","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/RightSection.tsx":"23","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/LeftSection.tsx":"24","/Users/sutaoliang/live-score/frontend/src/components/main/rightSection/RightSection.tsx":"25","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/LeftSection.tsx":"26","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/LeftSection.tsx":"27","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/MiddleSection.tsx":"28","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/MatchInfoTop.tsx":"29","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/dummyMlbGamesStats.ts":"30","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/MatchInfoBottom.tsx":"31","/Users/sutaoliang/live-score/frontend/src/context/SeasonContext.tsx":"32","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/LeagueTitle.tsx":"33","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/Standings.tsx":"34","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/dummyMlbGames.tsx":"35","/Users/sutaoliang/live-score/frontend/src/components/main/rightSection/rightSectionComponents/FeaturedMatch.tsx":"36","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/Calendar.tsx":"37","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/leagues/LeaguesAll.tsx":"38","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoTop.tsx":"39","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoMiddle.tsx":"40","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoBottom.tsx":"41","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/MobileTeamMenu.tsx":"42","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchStats.tsx":"43","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/LeagueNbaPlayed.tsx":"44","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/LeagueMlbPlayed.tsx":"45","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchInfoBottomRight.tsx":"46","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchTeams.tsx":"47","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MobileStatsMenu.tsx":"48","/Users/sutaoliang/live-score/frontend/src/reducer/seasonReducer.tsx":"49","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/dummyMlbStandings.ts":"50","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarDays.tsx":"51","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarDates.tsx":"52","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarTitle.tsx":"53","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/leagues/leaguesComponents/LeagueItem.tsx":"54","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/MlbMatchItem.tsx":"55","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/NbaMatchItem.tsx":"56","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/matchesComponents/MatchesLeft.tsx":"57","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/leaguePlayedTop/LeaguePlayedTop.tsx":"58","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/dummyMlbMatch.tsx":"59","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/matchesComponents/matchesLeftComponents/MatchLeftMatchItem.tsx":"60"},{"size":554,"mtime":1692111789880,"results":"61","hashOfConfig":"62"},{"size":425,"mtime":1692111789881,"results":"63","hashOfConfig":"62"},{"size":1124,"mtime":1692112830954,"results":"64","hashOfConfig":"62"},{"size":891,"mtime":1692111789874,"results":"65","hashOfConfig":"62"},{"size":1175,"mtime":1692111789874,"results":"66","hashOfConfig":"62"},{"size":326,"mtime":1692111789881,"results":"67","hashOfConfig":"62"},{"size":804,"mtime":1692111789881,"results":"68","hashOfConfig":"62"},{"size":282,"mtime":1692111789881,"results":"69","hashOfConfig":"62"},{"size":817,"mtime":1692111789880,"results":"70","hashOfConfig":"62"},{"size":4125,"mtime":1692111789880,"results":"71","hashOfConfig":"62"},{"size":279,"mtime":1692111789880,"results":"72","hashOfConfig":"62"},{"size":428,"mtime":1692111789880,"results":"73","hashOfConfig":"62"},{"size":309,"mtime":1692111789881,"results":"74","hashOfConfig":"62"},{"size":2513,"mtime":1692121261013,"results":"75","hashOfConfig":"62"},{"size":5087,"mtime":1692111789872,"results":"76","hashOfConfig":"62"},{"size":444,"mtime":1692111789866,"results":"77","hashOfConfig":"62"},{"size":1125,"mtime":1692111789867,"results":"78","hashOfConfig":"62"},{"size":12936,"mtime":1692111789873,"results":"79","hashOfConfig":"62"},{"size":3058,"mtime":1692111789869,"results":"80","hashOfConfig":"62"},{"size":10156,"mtime":1692111789866,"results":"81","hashOfConfig":"62"},{"size":6878,"mtime":1692111789870,"results":"82","hashOfConfig":"62"},{"size":144762,"mtime":1692111789873,"results":"83","hashOfConfig":"62"},{"size":4730,"mtime":1692111789866,"results":"84","hashOfConfig":"62"},{"size":568,"mtime":1692111789866,"results":"85","hashOfConfig":"62"},{"size":664,"mtime":1692111789870,"results":"86","hashOfConfig":"62"},{"size":626,"mtime":1692111789867,"results":"87","hashOfConfig":"62"},{"size":1571,"mtime":1692111789873,"results":"88","hashOfConfig":"62"},{"size":4810,"mtime":1692111789868,"results":"89","hashOfConfig":"62"},{"size":2154,"mtime":1692111789871,"results":"90","hashOfConfig":"62"},{"size":557301,"mtime":1692111789871,"results":"91","hashOfConfig":"62"},{"size":2085,"mtime":1692111789871,"results":"92","hashOfConfig":"62"},{"size":754,"mtime":1692111789874,"results":"93","hashOfConfig":"62"},{"size":1751,"mtime":1692111789866,"results":"94","hashOfConfig":"62"},{"size":9862,"mtime":1692111789867,"results":"95","hashOfConfig":"62"},{"size":3049,"mtime":1692111789868,"results":"96","hashOfConfig":"62"},{"size":3913,"mtime":1692111789870,"results":"97","hashOfConfig":"62"},{"size":2492,"mtime":1692111789867,"results":"98","hashOfConfig":"62"},{"size":1807,"mtime":1692111789868,"results":"99","hashOfConfig":"62"},{"size":3158,"mtime":1692111789873,"results":"100","hashOfConfig":"62"},{"size":1122,"mtime":1692111789873,"results":"101","hashOfConfig":"62"},{"size":880,"mtime":1692111789873,"results":"102","hashOfConfig":"62"},{"size":1088,"mtime":1692111789873,"results":"103","hashOfConfig":"62"},{"size":7146,"mtime":1692111789872,"results":"104","hashOfConfig":"62"},{"size":2386,"mtime":1692111789869,"results":"105","hashOfConfig":"62"},{"size":2464,"mtime":1692111789868,"results":"106","hashOfConfig":"62"},{"size":5328,"mtime":1692111789872,"results":"107","hashOfConfig":"62"},{"size":7392,"mtime":1692111789872,"results":"108","hashOfConfig":"62"},{"size":1058,"mtime":1692111789872,"results":"109","hashOfConfig":"62"},{"size":272,"mtime":1692111789881,"results":"110","hashOfConfig":"62"},{"size":12938,"mtime":1692111789867,"results":"111","hashOfConfig":"62"},{"size":332,"mtime":1692111789868,"results":"112","hashOfConfig":"62"},{"size":1771,"mtime":1692111789867,"results":"113","hashOfConfig":"62"},{"size":909,"mtime":1692111789868,"results":"114","hashOfConfig":"62"},{"size":1825,"mtime":1692111789868,"results":"115","hashOfConfig":"62"},{"size":7560,"mtime":1692111789869,"results":"116","hashOfConfig":"62"},{"size":7341,"mtime":1692111789869,"results":"117","hashOfConfig":"62"},{"size":1532,"mtime":1692111789874,"results":"118","hashOfConfig":"62"},{"size":817,"mtime":1692111789869,"results":"119","hashOfConfig":"62"},{"size":14887,"mtime":1692111789869,"results":"120","hashOfConfig":"62"},{"size":1900,"mtime":1692111789874,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vbu8pi",{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sutaoliang/live-score/frontend/src/index.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/reportWebVitals.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/App.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/context/DateContext.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/context/MatchContext.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/reducer/dateReducer.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/reducer/matchReducer.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/index.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/LeagueInfoPage.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/MainPage.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/HomePage.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/MatchInfoPage.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/pages/TeamInfoPage.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/api/nba.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/TeamInfo.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/LeagueInfo.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/Main.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/dummyMlbTeams.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/mobileMenuSection/MobileMenu.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/header/Navbar.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/matchInfo/MatchInfo.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/dummyMlbTeamMatches.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/RightSection.tsx",["312"],[],"import FeaturedMatch from \"components/main/rightSection/rightSectionComponents/FeaturedMatch\";\nimport nbaIcon from \"icons/nbaIcon.svg\";\nimport mlbIcon from \"icons/mlbIcon.svg\";\nimport { MatchContext } from \"context/MatchContext\";\nimport { useContext, useEffect } from \"react\";\nimport { leagueParamsProps, nbaMatchItemArray } from \"types/types\";\nimport styles from \"./RightSection.module.scss\";\n\ninterface combinedType extends leagueParamsProps, nbaMatchItemArray {}\nexport default function RightSection(props: combinedType) {\n  let date: Date | 0 | string | undefined | null = \"\";\n  const { match, dispatch } = useContext(MatchContext);\n  // set up Featured match info\n  // nba\n  if (props.league === \"nba\") {\n    const length = props.matches && props.matches.length;\n    const latestMatch =\n      (props?.matches && length && props?.matches[length - 1]) || {};\n    date = latestMatch && latestMatch.date?.start;\n    date = date?.toString()?.slice(0, 10);\n    // mlb\n  } else if (props.league === \"mlb\") {\n    const completedMatches =\n      props.matches &&\n      props.matches.filter((match) => {\n        return match.gameStatus !== \"scheduled\";\n      });\n    const length = completedMatches && completedMatches.length;\n    date = completedMatches && length && completedMatches[length - 1].gameDate;\n  }\n\n  // get teams\n  const allMlbTeamsStr = localStorage.getItem(\"allMlbTeams\");\n  const allMlbTeams = allMlbTeamsStr && JSON.parse(allMlbTeamsStr);\n\n  // dispatch nba/mlb match to featured match\n  useEffect(() => {\n    if (props.league === \"nba\") {\n      // find the latest match\n      const length = props?.matches && props?.matches.length;\n      const latestMatch =\n        (props?.matches && length && props?.matches[length - 1]) || {};\n      dispatch({\n        type: \"selectFeaturedMatch\",\n        ...match,\n        awayTeam: {\n          nickname: latestMatch.teams?.visitors?.nickname,\n          id: latestMatch.teams?.visitors?.id,\n          logo: latestMatch.teams?.visitors?.logo,\n        },\n        homeTeam: {\n          nickname: latestMatch.teams?.home?.nickname,\n          id: latestMatch.teams?.home?.id,\n          logo: latestMatch.teams?.home?.logo,\n        },\n        scores: {\n          awayTotal: latestMatch.scores?.visitors?.points,\n          homeTotal: latestMatch.scores?.home?.points,\n        },\n        leagueType: props.league,\n        id: latestMatch.id,\n      });\n    } else if (props.league === \"mlb\") {\n      // filtered to the matches that is completed\n      const completedMatches =\n        props.matches &&\n        props.matches.filter((match) => {\n          return match.gameStatus !== \"scheduled\";\n        });\n      const length = completedMatches && completedMatches.length;\n      // find the latest match that is completed\n      const latestMatch =\n        (completedMatches && length && completedMatches[length - 1]) || {};\n\n      // get the scores from lineScore\n      const awayScore = latestMatch.lineScore?.away?.R;\n      const homeScore = latestMatch.lineScore?.home?.R;\n\n      // find mlb team logo from localStorage\n      const filteredHomeTeam =\n        allMlbTeams &&\n        allMlbTeams.filter(\n          (team: any) => Number(team.teamID) === match?.homeTeam?.id\n        )[0]?.mlbLogo1;\n      const filteredAwayTeam =\n        allMlbTeams &&\n        allMlbTeams.filter(\n          (team: any) => Number(team.teamID) === match?.awayTeam?.id\n        )[0]?.mlbLogo1;\n\n      // dispatch match to featured match\n      dispatch({\n        type: \"selectFeaturedMatch\",\n        ...match,\n        awayTeam: {\n          nickname: latestMatch.away,\n          id: Number(latestMatch.teamIDAway),\n          logo: filteredAwayTeam,\n        },\n        homeTeam: {\n          nickname: latestMatch.home,\n          id: Number(latestMatch.teamIDHome),\n          logo: filteredHomeTeam,\n        },\n        scores: {\n          awayTotal: awayScore,\n          homeTotal: homeScore,\n        },\n        leagueType: props.league,\n        id: latestMatch.gameID,\n      });\n    }\n  }, [props.league, props.matches]);\n  return (\n    <div className={styles.rightSection}>\n      <h3 className={styles.title}>Featured Match</h3>\n      <div className={styles.matchLeague}>\n        <img\n          className={styles.leagueIcon}\n          src={props.league === \"nba\" ? nbaIcon : mlbIcon}\n          alt=\"leagueIcon.svg\"\n        />\n        <div className={styles.matchTitle}>\n          <span className={styles.leagueName}>\n            {props.league === \"nba\"\n              ? \"National Basketball Association\"\n              : \"Major League Baseball\"}\n          </span>\n          <span className={styles.matchDate}>{date}</span>\n        </div>\n      </div>\n      <FeaturedMatch league={props.league} />\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/LeftSection.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/rightSection/RightSection.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/LeftSection.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/LeftSection.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/MiddleSection.tsx",["313","314","315","316"],[],"import LeagueNbaPlayed from \"./middleSectionComponents/LeagueNbaPlayed\";\nimport LeagueMlbPlayed from \"./middleSectionComponents/LeagueMlbPlayed\";\nimport { DateContext } from \"context/DateContext\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getAllGames, getLiveGames } from \"api/nba\";\nimport { getMlbGames } from \"api/mlb\";\nimport { dummyMlbGames } from \"./dummyMlbGames\";\nimport {\n  showSportType,\n  showFavorites,\n  middleSecRef,\n  onMobileIcon,\n} from \"types/types\";\nimport clsx from \"clsx\";\nimport styles from \"./MiddleSection.module.scss\";\n\ninterface combinedType\n  extends showFavorites,\n    showSportType,\n    middleSecRef,\n    onMobileIcon {}\n\nexport default function MiddleSection(props: combinedType) {\n  // use useState to get all games data\n  const [nbaGamesOnDate, setNbaGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const [mlbGamesOnDate, setMlbGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const { state } = useContext(DateContext);\n\n  // turn the date into db schema format\n  let nbaDate = `${state.year}-`;\n  let mlbDate = `${state.year}`;\n  // avoid possibly only single digit number\n  if (state.monthIndex && state.monthIndex < 9) {\n    nbaDate += `0${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `0${state.monthIndex && state.monthIndex + 1}`;\n  } else {\n    nbaDate += `${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `${state.monthIndex && state.monthIndex + 1}`;\n  }\n  if (state.date && state.date < 10) {\n    nbaDate += `0${state.date}`;\n    mlbDate += `0${state.date}`;\n  } else {\n    nbaDate += `${state.date}`;\n    mlbDate += `${state.date}`;\n  }\n\n  // control whether nba games should be shown\n  const [showNba, setShowNba] = useState<boolean | null>(null);\n\n  // control whether mlb games should be shown\n  const [showMlb, setShowMlb] = useState<boolean | null>(null);\n\n  // get nba games\n  useEffect(() => {\n    const asyncGetAllGames = async () => {\n      const response = await getAllGames(nbaDate);\n      setNbaGamesOnDate(response && response.data.response);\n    };\n    asyncGetAllGames();\n  }, [nbaDate]);\n\n  useEffect(() => {\n    // control whether nba games should be shown\n    if (props.showSport === \"basketball\" || props.showSport === \"all\") {\n      if (nbaGamesOnDate && Object.values(nbaGamesOnDate).length) {\n        setShowNba(true);\n      } else {\n        setShowNba(false);\n      }\n    } else {\n      setShowNba(false);\n    }\n  }, [props.showSport, nbaDate, nbaGamesOnDate]);\n\n  // useEffect(() => {\n  //   const asyncGetMlbGames = async () => {\n  //     const response = await getMlbGames(mlbDate);\n  //     // setMlbGamesOnDate(response && response?.data?.body);\n  //     console.log(response);\n  //   };\n  //   asyncGetMlbGames();\n  // }, [mlbDate]);\n\n  useEffect(() => {\n    // control whether mlb games should be shown\n    if (props.showSport === \"baseball\" || props.showSport === \"all\") {\n      if (mlbGamesOnDate && Object.values(mlbGamesOnDate)[0]) {\n        setShowMlb(true);\n      }\n    }\n  }, [props.showSport, mlbGamesOnDate]);\n  return (\n    <div\n      className={clsx(\n        { [styles.noShow]: props.showMobileIcon === \"leagues\" },\n        styles.middleSection\n      )}\n    >\n      <h3 className={styles.middleTitle} ref={props.middleSecRef}>\n        {props.showFavorites ? \"Favorite teams games\" : \"Pinned Games\"}\n      </h3>\n      {/* dummy data不管輸入資料是否正確，都會render，因此這邊需要判斷式來比對是否當天有資料 */}\n      {showNba &&\n      nbaGamesOnDate &&\n      mlbDate === \"20230718\" &&\n      dummyMlbGames &&\n      props.showSport === \"all\" ? (\n        <div>\n          <LeagueNbaPlayed\n            nbaGames={nbaGamesOnDate}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n          <LeagueMlbPlayed\n            mlbGames={dummyMlbGames}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n        </div>\n      ) : showNba && nbaGamesOnDate ? (\n        <LeagueNbaPlayed\n          nbaGames={nbaGamesOnDate}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : mlbDate === \"20230718\" &&\n        dummyMlbGames &&\n        (props.showSport === \"baseball\" || props.showSport === \"all\") ? (\n        <LeagueMlbPlayed\n          mlbGames={dummyMlbGames}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : (\n        <div className={styles.noEventsWrapper}>\n          <img\n            src=\"https://www.sofascore.com/static/images/empty_state/empty-state-no-events-1.svg\"\n            alt=\"noEvent.svg\"\n          />\n          <h2 className={styles.emptyData}>No Events</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/MatchInfoTop.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/matchInfo/dummyMlbGamesStats.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/MatchInfoBottom.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/context/SeasonContext.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/LeagueTitle.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/Standings.tsx",["317"],[],"import { getTeamsStandings } from \"api/nba\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { SeasonContext } from \"context/SeasonContext\";\nimport {\n  nbaTeamsStandingType,\n  nbaTeamStandingType,\n  leagueParamsProps,\n  mlbTeamStandingType,\n} from \"types/types\";\nimport clsx from \"clsx\";\nimport { dummyMlbStandings } from \"./dummyMlbStandings\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./Standings.module.scss\";\n\nexport default function Standings(props: leagueParamsProps) {\n  const [conference, setConference] = useState<string>(\"\");\n  const { season } = useContext(SeasonContext);\n  const seasonString = season.season;\n  const [nbaStandingData, nbaSetStandingData] =\n    useState<null | nbaTeamsStandingType>(null);\n  const [mlbStandingData, setMlbStandingData] = useState<object[] | null>(null);\n  const defaultLogo = \"https://www.svgrepo.com/show/133513/shield.svg\";\n  const navigate = useNavigate();\n\n  //sort nab teams by their ranks\n  const reOrdered =\n    nbaStandingData && new Array<object>(nbaStandingData?.length);\n  if (nbaStandingData && reOrdered) {\n    nbaStandingData.map((team: nbaTeamStandingType, index: number) => {\n      const rank: number | undefined = team.conference?.rank;\n      return rank && reOrdered?.splice(rank - 1, 1, team);\n    });\n  }\n\n  // mlb section\n  // sort mlb data into AL and NL\n  const alArr: mlbTeamStandingType[] = [];\n  const nlArr: mlbTeamStandingType[] = [];\n  mlbStandingData?.map((team: mlbTeamStandingType, index: number) => {\n    if (team?.conference === \"National League\") {\n      nlArr.push(team);\n    } else {\n      alArr.push(team);\n    }\n  });\n\n  nlArr.sort((a, b) => {\n    if (a.wins !== b.wins) return Number(b.wins) - Number(a.wins);\n    else return Number(a.loss) - Number(b.loss);\n  });\n\n  alArr.sort((a, b) => {\n    if (a.wins !== b.wins) return Number(b.wins) - Number(a.wins);\n    else return Number(a.loss) - Number(b.loss);\n  });\n\n  // make nba default conference\n  useEffect(() => {\n    if (props.league === \"nba\") {\n      setConference(\"east\");\n    }\n  }, [props.league]);\n\n  // get nba\n  useEffect(() => {\n    const asyncGetTeamsStandings = async () => {\n      const response = await getTeamsStandings(\n        \"standard\",\n        seasonString,\n        conference\n      );\n      nbaSetStandingData(response && response?.data?.response);\n    };\n    if (\n      props.league === \"nba\" &&\n      conference !== (\"American League\" || \"National League\" || \"\")\n    ) {\n      asyncGetTeamsStandings();\n    }\n  }, [seasonString, props.league, conference]);\n\n  // get mlb\n  useEffect(() => {\n    if (props.league === \"mlb\") {\n      setConference(\"American League\");\n      setMlbStandingData(dummyMlbStandings);\n    }\n  }, [props.league]);\n\n  return (\n    <div className={styles.standings}>\n      <div className={styles.title}>Standings</div>\n      <div className={styles.buttonGroup}>\n        {props.league === \"nba\" && (\n          <>\n            <div\n              className={styles.buttonWrapper}\n              onClick={() => setConference(\"east\")}\n            >\n              <button\n                className={clsx({ [styles.selected]: conference === \"east\" })}\n              >\n                EAST\n              </button>\n              <div\n                className={clsx({ [styles.underline]: conference === \"east\" })}\n              ></div>\n            </div>\n            <div\n              className={styles.buttonWrapper}\n              onClick={() => setConference(\"west\")}\n            >\n              <button\n                className={clsx({ [styles.selected]: conference === \"west\" })}\n              >\n                WEST\n              </button>\n              <div\n                className={clsx({ [styles.underline]: conference === \"west\" })}\n              ></div>\n            </div>\n          </>\n        )}\n        {props.league === \"mlb\" && (\n          <>\n            <div\n              className={styles.buttonWrapper}\n              onClick={() => setConference(\"American League\")}\n            >\n              <button\n                className={clsx({\n                  [styles.selected]: conference === \"American League\",\n                })}\n              >\n                American League\n              </button>\n              <div\n                className={clsx({\n                  [styles.underline]: conference === \"American League\",\n                })}\n              ></div>\n            </div>\n            <div\n              className={styles.buttonWrapper}\n              onClick={() => setConference(\"National League\")}\n            >\n              <button\n                className={clsx({\n                  [styles.selected]: conference === \"National League\",\n                })}\n              >\n                National League\n              </button>\n              <div\n                className={clsx({\n                  [styles.underline]: conference === \"National League\",\n                })}\n              ></div>\n            </div>\n          </>\n        )}\n      </div>\n      <div className={styles.standingsWrapper}>\n        <table>\n          <thead>\n            <tr>\n              <th className={styles.teamId}>#</th>\n              <th>\n                <div className={styles.teamName}>Team</div>\n              </th>\n              <th>\n                <div className={styles.emptyGap}></div>\n              </th>\n              <th>P</th>\n              <th>W-L</th>\n              <th>PCT</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.league === \"nba\" &&\n              reOrdered &&\n              reOrdered.map((team: nbaTeamStandingType, index: number) => {\n                const conferenceObj = team?.conference;\n                const wins = conferenceObj?.win;\n                const losses = conferenceObj?.loss;\n                const totalPlayed = wins && losses && wins + losses;\n                return (\n                  <tr\n                    key={index}\n                    className={styles.rows}\n                    onClick={() => navigate(`/teamInfo/nba/${team.team?.id}`)}\n                  >\n                    <td className={styles.teamRank}>{conferenceObj?.rank}</td>\n                    <td>\n                      <div className={styles.teamName}>\n                        <img\n                          className={styles.teamLogo}\n                          src={\n                            team?.team?.logo ? team?.team?.logo : defaultLogo\n                          }\n                          alt=\"teamLogo.png\"\n                        />\n                        <span>{team?.team?.nickname}</span>\n                      </div>\n                    </td>\n                    <td>\n                      <div className={styles.emptyGap}></div>\n                    </td>\n                    <td>{totalPlayed}</td>\n                    <td>{`${wins}-${losses}`}</td>\n                    <td>{wins && losses && (wins / losses).toFixed(3)}</td>\n                  </tr>\n                );\n              })}\n            {props.league === \"mlb\" &&\n              conference === \"National League\" &&\n              nlArr &&\n              nlArr.map((team: mlbTeamStandingType, index: number) => {\n                const wins = Number(team.wins);\n                const losses = Number(team.loss);\n                const totalPlayed = wins && losses && wins + losses;\n                return (\n                  <tr\n                    key={index}\n                    className={styles.rows}\n                    onClick={() => navigate(`/teamInfo/mlb/${team.teamID}`)}\n                  >\n                    <td className={styles.teamRank}>{index + 1}</td>\n                    <td>\n                      <div className={styles.teamName}>\n                        <img\n                          className={styles.teamLogo}\n                          src={team.mlbLogo1 ? team.mlbLogo1 : defaultLogo}\n                          alt=\"teamLogo.png\"\n                        />\n                        <span>{team.teamName}</span>\n                      </div>\n                    </td>\n                    <td>\n                      <div className={styles.emptyGap}></div>\n                    </td>\n                    <td>{totalPlayed}</td>\n                    <td>{`${wins}-${losses}`}</td>\n                    <td>{wins && losses && (wins / losses).toFixed(3)}</td>\n                  </tr>\n                );\n              })}\n            {props.league === \"mlb\" &&\n              conference === \"American League\" &&\n              alArr &&\n              alArr.map((team: mlbTeamStandingType, index: number) => {\n                const wins = Number(team.wins);\n                const losses = Number(team.loss);\n                const totalPlayed = wins && losses && wins + losses;\n                return (\n                  <tr\n                    key={index}\n                    className={styles.rows}\n                    onClick={() => navigate(`/teamInfo/mlb/${team.teamID}`)}\n                  >\n                    <td className={styles.teamRank}>{index + 1}</td>\n                    <td>\n                      <div className={styles.teamName}>\n                        <img\n                          className={styles.teamLogo}\n                          src={team.mlbLogo1 ? team.mlbLogo1 : defaultLogo}\n                          alt=\"teamLogo.png\"\n                        />\n                        <span>{team.teamName}</span>\n                      </div>\n                    </td>\n                    <td>\n                      <div className={styles.emptyGap}></div>\n                    </td>\n                    <td>{totalPlayed}</td>\n                    <td>{`${wins}-${losses}`}</td>\n                    <td>{wins && losses && (wins / losses).toFixed(3)}</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/dummyMlbGames.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/rightSection/rightSectionComponents/FeaturedMatch.tsx",["318"],[],"import { useContext, useEffect, useState } from \"react\";\nimport { MatchContext } from \"context/MatchContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { showSportType, allTeams, leagueParamsProps } from \"types/types\";\nimport styles from \"./FeaturedMatch.module.scss\";\n\ninterface combinedType extends showSportType, leagueParamsProps {}\nexport default function FeaturedMatch(props: combinedType) {\n  // just temporarily shows some logo for better view (will figure out other ways later)\n\n  const { match, dispatch } = useContext(MatchContext);\n  // extract the latest/selected match information\n  const awayTeam = match.awayTeam;\n  const homeTeam = match.homeTeam;\n  const scores = match.scores;\n  // use useState to memorize the teams logo\n  const defaultLogo = \"https://www.svgrepo.com/show/133513/shield.svg\";\n  const [awayTeamLogo, setAwayTeamLogo] = useState(defaultLogo);\n  const [homeTeamLogo, setHomeTeamLogo] = useState(defaultLogo);\n\n  const navigate = useNavigate();\n  const handleClick = () => {\n    // if Featured Match is not empty, then dispatch data to matchInfoPage\n    if (\n      match?.awayTeam?.nickname !== \"away\" ||\n      match?.homeTeam?.nickname !== \"home\"\n    ) {\n      dispatch({\n        type: \"selectFeaturedMatch\",\n        ...match,\n        awayTeam: {\n          ...match.awayTeam,\n          logo: awayTeamLogo,\n        },\n        homeTeam: {\n          ...match.homeTeam,\n          logo: homeTeamLogo,\n        },\n      });\n      return navigate(`/match/${match.leagueType}/${match.id}`);\n    }\n    alert(\"no teams selcted\");\n  };\n\n  // get teams\n  const allNbaTeamsStr = localStorage.getItem(\"allNbaTeams\");\n  const allNbaTeams = allNbaTeamsStr && JSON.parse(allNbaTeamsStr);\n\n  const allMlbTeamsStr = localStorage.getItem(\"allMlbTeams\");\n  const allMlbTeams = allMlbTeamsStr && JSON.parse(allMlbTeamsStr);\n\n  useEffect(() => {\n    // if match.homeTeam data exists, and the data is from nba\n    if (homeTeam?.id && homeTeam?.nickname && homeTeam?.nickname?.length > 3) {\n      // find nba team form localStorage\n      const filteredHomeTeam =\n        allNbaTeams &&\n        allNbaTeams.filter((team: allTeams) => team.id === match?.homeTeam?.id);\n      const filteredAwayTeam =\n        allNbaTeams &&\n        allNbaTeams.filter((team: allTeams) => team.id === match?.awayTeam?.id);\n      setHomeTeamLogo(\n        filteredHomeTeam ? filteredHomeTeam[0].logo : defaultLogo\n      );\n      setAwayTeamLogo(\n        filteredAwayTeam ? filteredAwayTeam[0].logo : defaultLogo\n      );\n    } else {\n      // find mlb team from localStorage\n      const filteredHomeTeam =\n        allMlbTeams &&\n        allMlbTeams.filter(\n          (team: any) => Number(team.teamID) === match?.homeTeam?.id\n        )[0]?.mlbLogo1;\n      const filteredAwayTeam =\n        allMlbTeams &&\n        allMlbTeams.filter(\n          (team: any) => Number(team.teamID) === match?.awayTeam?.id\n        )[0]?.mlbLogo1;\n      setHomeTeamLogo(filteredHomeTeam ? filteredHomeTeam : defaultLogo);\n      setAwayTeamLogo(filteredAwayTeam ? filteredAwayTeam : defaultLogo);\n    }\n  }, [homeTeam, props?.showSport, allNbaTeams, allMlbTeams]);\n  return (\n    <div className={styles.featuredMatch} onClick={handleClick}>\n      <div className={styles.matchInfo}>\n        <div className={styles.away}>\n          <h3 className={styles.awayName}>{awayTeam?.nickname}</h3>\n          <img className={styles.logo} src={awayTeamLogo} alt=\"awayTeam.svg\" />\n        </div>\n        <div className={styles.scores}>\n          <span className={styles.awayScore}>{scores?.awayTotal}</span>\n          <span>-</span>\n          <span className={styles.homeScore}>{scores?.homeTotal}</span>\n        </div>\n        <div className={styles.home}>\n          <h3 className={styles.homeName}>{homeTeam?.nickname}</h3>\n          <img className={styles.logo} src={homeTeamLogo} alt=\"homeTeam.svg\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/Calendar.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/leagues/LeaguesAll.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoTop.tsx",["319"],[],"import usa from \"icons/usaIcon.svg\";\nimport bellEmpty from \"icons/bellEmptyIcon.svg\";\nimport bellSolid from \"icons/bellSolidIcon.svg\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { teamInfoType } from \"types/types\";\nimport clsx from \"clsx\";\nimport styles from \"./TeamInfoTop.module.scss\";\n\nexport default function TeamInfoTop(props: teamInfoType) {\n  // use useState to decide whether the team is subscribed\n  const [teamSubs, setTeamSubs] = useState(false);\n\n  // if localStorage does exists\n  // determine whether user clicked via matchInfo awayLogo or homeLogo\n  const teamNickname = props.teamNickname;\n  const teamFullName = props.teamFullName;\n\n  // toggle subscribe team\n  const handleBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const teams = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = teams && JSON.parse(teams);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((team: string) => team === teamNickname)) {\n        // remove the name from array\n        setTeamSubs(false);\n        const arr = teamsParsed.filter((team: string) => team !== teamNickname);\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setTeamSubs(true);\n        teamsParsed.push(teamNickname);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setTeamSubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([teamNickname]));\n    }\n  };\n\n  useEffect(() => {\n    // check whethther the team is subscribed\n    const subscribedTeamsString = localStorage.getItem(\"subscribedTeams\");\n    const subscribedTeams: string[] =\n      subscribedTeamsString && JSON.parse(subscribedTeamsString);\n    const isTeamSub =\n      teamNickname && subscribedTeams?.some((team) => team === teamNickname);\n    if (isTeamSub) {\n      setTeamSubs(true);\n    }\n  }, [teamNickname]);\n\n  return (\n    <div className={styles.teamInfoTop}>\n      <div className={styles.logoTitleWrapper}>\n        {/* for nba id */}\n        <img\n          className={styles.teamLogo}\n          src={props?.teamLogo}\n          alt=\"teamLogo.svg\"\n        />\n        <div className={styles.teamNameWrapper}>\n          <div className={styles.teamTitle}>{teamFullName}</div>\n          <div className={styles.teamLocation}>\n            <img className={styles.locationLogo} src={usa} alt=\"usaIcon.svg\" />\n            <div className={styles.locationName}>United States</div>\n          </div>\n        </div>\n      </div>\n      <div\n        className={clsx(\n          { [styles.solid]: teamSubs },\n          styles.subscriptionWrapper\n        )}\n        onClick={handleBellClicked}\n      >\n        <div className={styles.follow}>{teamSubs ? \"FOLLOWED\" : \"FOLLOW\"}</div>\n        <img\n          className={styles.subscriptionBell}\n          src={teamSubs ? bellSolid : bellEmpty}\n          alt=\"bellEmptyIcon.svg\"\n        />\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoMiddle.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/TeamInfoBottom.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/MobileTeamMenu.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchStats.tsx",["320","321"],[],"import { useState, useEffect } from \"react\";\nimport {\n  matchStatsType,\n  nbaMatchStatsObjectType,\n  mlbteamStatsType,\n  mobileStatsProps,\n} from \"types/types\";\nimport clsx from \"clsx\";\nimport styles from \"./MatchStats.module.scss\";\n\ninterface combinedType\n  extends nbaMatchStatsObjectType,\n    mlbteamStatsType,\n    mobileStatsProps {}\n\nexport default function MatchStats(props: combinedType) {\n  const [nbaHomeStats, setNbaHomeStats] = useState<\n    null | undefined | matchStatsType\n  >(null);\n  const [nbaAwayStats, setNbaAwayStats] = useState<\n    null | undefined | matchStatsType\n  >(null);\n  const [mlbHomeStats, setMlbHomeStats] = useState<\n    mlbteamStatsType | matchStatsType | null\n  >(null);\n  const [mlbAwayStats, setMlbAwayStats] = useState<\n    mlbteamStatsType | matchStatsType | null | undefined\n  >(null);\n  // nba decompose localStorage/props obj\n  const nbaHomeStatArr = nbaHomeStats?.statistics;\n  const nbaHomeStatObj = nbaHomeStatArr && nbaHomeStatArr[0];\n  const nbaHomeStatKeys = nbaHomeStatObj && Object.keys(nbaHomeStatObj);\n  const nbaAwayStatArr = nbaAwayStats?.statistics;\n  const nbaAwayStatObj = nbaAwayStatArr && nbaAwayStatArr[0];\n\n  // mlb decompose localStorage/props obj\n  const mlbHomeStatObj = mlbHomeStats && {\n    ...mlbHomeStats?.Hitting,\n    ...mlbHomeStats?.Pitching,\n    ...mlbHomeStats?.BaseRunning,\n  };\n  const mlbAwayStatObj = mlbAwayStats && {\n    ...mlbAwayStats?.Hitting,\n    ...mlbAwayStats?.Pitching,\n    ...mlbAwayStats?.BaseRunning,\n  };\n  const mlbHomeStatKeys = mlbHomeStatObj && Object.keys(mlbHomeStatObj);\n\n  const limitedNbaStats = [\n    \"assists\",\n    \"blocks\",\n    \"defReb\",\n    \"fga\",\n    \"fgm\",\n    \"offReb\",\n    \"pFouls\",\n    \"points\",\n    \"steals\",\n    \"steals\",\n    \"totReb\",\n    \"tpa\",\n    \"tpm\",\n    \"turnovers\",\n  ];\n\n  const limitedMlbStats = [\n    \"R\",\n    \"H\",\n    \"2B\",\n    \"3B\",\n    \"CS\",\n    \"PO\",\n    \"SB\",\n    \"BB\",\n    \"TB\",\n    \"Batters Faced\",\n    \"Flyouts\",\n    \"Groundouts\",\n    \"Pitches\",\n    \"Strikes\",\n    \"Wild Pitch\",\n  ];\n\n  // get localStorage obj data\n  useEffect(() => {\n    const matchInfoObjString = localStorage.getItem(\"matchInfoObj\");\n    const matchInfoObj = matchInfoObjString && JSON.parse(matchInfoObjString);\n    // fot nba\n    if (matchInfoObj && matchInfoObj.leagueType === \"nba\") {\n      const homeStatsObjString = localStorage.getItem(\"homeStats\");\n      const awayStatsObjString = localStorage.getItem(\"awayStats\");\n      homeStatsObjString && setNbaHomeStats(JSON.parse(homeStatsObjString));\n      awayStatsObjString && setNbaAwayStats(JSON.parse(awayStatsObjString));\n    }\n    // for mlb\n    if (matchInfoObj && matchInfoObj.leagueType === \"mlb\") {\n      const homeStatsObjString = localStorage.getItem(\"homeStats\");\n      const awayStatsObjString = localStorage.getItem(\"awayStats\");\n      homeStatsObjString && setMlbHomeStats(JSON.parse(homeStatsObjString));\n      awayStatsObjString && setMlbAwayStats(JSON.parse(awayStatsObjString));\n    }\n  }, []);\n\n  // get props obj data\n  useEffect(() => {\n    // for nba\n    if (props.leagueType === \"nba\") {\n      const propsAwayStats = props?.awayStats;\n      const propsHomeStats = props.homeStats;\n      propsAwayStats && setNbaHomeStats(propsHomeStats);\n      propsHomeStats && setNbaAwayStats(propsAwayStats);\n    }\n    // for mlb\n    if (props.leagueType === \"mlb\") {\n      const propsAwayStats = props?.awayStats;\n      const propsHomeStats = props.homeStats;\n      propsAwayStats && setMlbAwayStats(propsAwayStats);\n      propsHomeStats && setMlbHomeStats(propsHomeStats);\n    }\n  }, [props.leagueType, props?.awayStats, props.homeStats]);\n\n  return (\n    <div\n      className={clsx(\n        { [styles.noShow]: props.activeMenu === \"details\" },\n        styles.matchStats\n      )}\n    >\n      <div className={styles.title}>Match Stats</div>\n      <div className={styles.allStatsWrapper}>\n        {nbaHomeStatKeys &&\n          nbaHomeStatKeys?.map((key: string, index: number) => {\n            if (limitedNbaStats.includes(key)) {\n              const awayKeyStat =\n                nbaAwayStatObj && nbaAwayStatObj[key as keyof object];\n              const homeKeyStat =\n                nbaHomeStatObj && nbaHomeStatObj[key as keyof object];\n              return (\n                <div className={styles.statsRow} key={index}>\n                  <div\n                    className={clsx(\n                      {\n                        [styles.awayStat]:\n                          awayKeyStat && awayKeyStat <= homeKeyStat,\n                      },\n                      {\n                        [styles.highlightStats]:\n                          awayKeyStat && awayKeyStat > homeKeyStat,\n                      }\n                    )}\n                  >\n                    {awayKeyStat}\n                  </div>\n                  <div className={styles.statsTitle}>{key}</div>\n                  <div\n                    className={clsx(\n                      {\n                        [styles.homeStat]:\n                          awayKeyStat && homeKeyStat <= awayKeyStat,\n                      },\n                      {\n                        [styles.highlightStats]:\n                          awayKeyStat && homeKeyStat > awayKeyStat,\n                      }\n                    )}\n                  >\n                    {homeKeyStat}\n                  </div>\n                </div>\n              );\n            }\n          })}\n        {mlbHomeStatKeys &&\n          mlbHomeStatKeys?.map((key: string, index: number) => {\n            if (limitedMlbStats.includes(key)) {\n              const awayKeyStat =\n                mlbAwayStatObj && mlbAwayStatObj[key as keyof object];\n              const homeKeyStat =\n                mlbHomeStatObj && mlbHomeStatObj[key as keyof object];\n              return (\n                <div className={styles.statsRow} key={index}>\n                  <div\n                    className={clsx(\n                      {\n                        [styles.awayStat]:\n                          awayKeyStat &&\n                          Number(awayKeyStat) <= Number(homeKeyStat),\n                      },\n                      {\n                        [styles.highlightStats]:\n                          awayKeyStat &&\n                          Number(awayKeyStat) > Number(homeKeyStat),\n                      }\n                    )}\n                  >\n                    {awayKeyStat}\n                  </div>\n                  <div className={styles.statsTitle}>{key}</div>\n                  <div\n                    className={clsx(\n                      {\n                        [styles.homeStat]:\n                          awayKeyStat &&\n                          Number(homeKeyStat) <= Number(awayKeyStat),\n                      },\n                      {\n                        [styles.highlightStats]:\n                          awayKeyStat &&\n                          Number(homeKeyStat) > Number(awayKeyStat),\n                      }\n                    )}\n                  >\n                    {homeKeyStat}\n                  </div>\n                </div>\n              );\n            }\n          })}\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/LeagueNbaPlayed.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/LeagueMlbPlayed.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchInfoBottomRight.tsx",["322","323"],[],"import { matchInfoObj, mlbMatchInfoType, mobileStatsProps } from \"types/types\";\nimport { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport styles from \"./MatchInfoBottomRight.module.scss\";\nimport { match } from \"assert\";\n\ninterface combinedMatchInfpType extends mlbMatchInfoType, matchInfoObj {}\ninterface combinedPropsType extends matchInfoObj, mobileStatsProps {}\n\nexport default function MatchInfo(props: combinedPropsType) {\n  const [matchInfoObj, setMatchInfoObj] =\n    useState<null | combinedMatchInfpType>(null);\n  const [periodsPercentString, setPeriodsPercentString] = useState<\n    string | undefined | 0\n  >(\"\");\n  let awayScores: null | number[] | string[] | undefined = null;\n  let homeScores: null | number[] | string[] | undefined = null;\n\n  const officials = props.officials ? props.officials : matchInfoObj?.officials;\n\n  // in here only the first render data matters, because the periodsPercent remians unchange in the useEffect\n  const periods = props.periods ? props.periods : matchInfoObj?.periods;\n  let periodsPercent: number | undefined | 0 | null = 0;\n\n  if (props?.awayScores || props?.homeScores) {\n    awayScores = props?.awayScores;\n    homeScores = props?.homeScores;\n  } else {\n    if (matchInfoObj?.leagueType === \"nba\") {\n      awayScores = matchInfoObj && matchInfoObj.awayScores;\n      homeScores = matchInfoObj && matchInfoObj.homeScores;\n    }\n    if (matchInfoObj?.leagueType === \"mlb\") {\n      const awayScoresObj = matchInfoObj?.lineScore?.away?.scoresByInning;\n      awayScores = awayScoresObj && Object.values(awayScoresObj);\n      const homeScoresObj = matchInfoObj?.lineScore?.home?.scoresByInning;\n      homeScores = homeScoresObj && Object.values(homeScoresObj);\n    }\n  }\n\n  useEffect(() => {\n    const matchInfoObjString = localStorage.getItem(\"matchInfoObj\");\n    matchInfoObjString && setMatchInfoObj(JSON.parse(matchInfoObjString));\n  }, []);\n\n  useEffect(() => {\n    periodsPercent = awayScores && Number(periods) / awayScores?.length;\n    if (periodsPercent === 1 || \"Final\") {\n      setPeriodsPercentString(\"100%\");\n    } else {\n      periodsPercent && setPeriodsPercentString(periodsPercent.toString());\n    }\n  }, []);\n\n  return (\n    <div\n      className={clsx(\n        { [styles.noShow]: props.activeMenu === \"statistics\" },\n        styles.matchInfo\n      )}\n    >\n      <div className={styles.title}>Match Info</div>\n      <div className={styles.tableWrapper}>\n        <table>\n          <thead>\n            <tr>\n              {awayScores &&\n                awayScores.map((score: number | string, index: number) => {\n                  return (\n                    <th key={index}>\n                      {index + 1}\n                      {(props.leagueType\n                        ? props.leagueType\n                        : matchInfoObj?.leagueType) === \"nba\"\n                        ? \"Q\"\n                        : \"\"}\n                    </th>\n                  );\n                })}\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {awayScores &&\n                awayScores.map((score: number | string, index: number) => {\n                  return <td key={index}>{score}</td>;\n                })}\n            </tr>\n            <tr>\n              {homeScores &&\n                homeScores.map((score: number | string, index: number) => {\n                  return <td key={index}>{score}</td>;\n                })}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className={styles.timeline}>\n        <div className={styles.timelineBody}>\n          <div className={styles.rectangle}>\n            <div className={styles.halftime}></div>\n            <div\n              className={styles.timelineBar}\n              style={{ position: \"absolute\", left: periodsPercentString }}\n            ></div>\n            <div\n              className={styles.timeLayer}\n              style={{\n                position: \"absolute\",\n                height: \"100%\",\n                opacity: \"0.3\",\n                left: \"0\",\n                width: periodsPercentString,\n              }}\n            ></div>\n          </div>\n        </div>\n        <div className={styles.timecodeWrapper}>\n          <div className={styles.startTime}>\n            {props.matchHour ? props.matchHour : matchInfoObj?.matchHour}\n          </div>\n          {/* only nba uses halftime, mlb will use innings to view the timeline */}\n          <div className={styles.halftime}>HT</div>\n          <div className={styles.fulltime}>FT</div>\n        </div>\n      </div>\n      <div className={styles.arena}>\n        <h3 className={styles.arenaTitle}>Arena</h3>\n        <div className={styles.areanaName}>\n          Name: {props.arena ? props.arena : matchInfoObj?.arena}\n        </div>\n        <div className={styles.areanaCity}>\n          City: {props.city ? props.city : matchInfoObj?.city}\n        </div>\n        <div className={styles.areanaState}>\n          State: {props.state ? props.state : matchInfoObj?.state}\n        </div>\n      </div>\n      <div className={styles.officials}>\n        <h3 className={styles.officialsTitle}>Officials</h3>\n        {officials &&\n          officials.map((name: string) => {\n            return <div className={styles.officialsName}>{name}</div>;\n          })}\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MatchTeams.tsx",["324"],[],"import bellEmptyIcon from \"icons/bellEmptyIcon.svg\";\nimport bellSolidIcon from \"icons/bellSolidIcon.svg\";\nimport triangleRight from \"icons/triangle-right.svg\";\nimport { useState, useEffect } from \"react\";\nimport { matchInfoObj } from \"types/types\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./MatchTeams.module.scss\";\n\nexport default function MatchTeams(props: matchInfoObj) {\n  const [matchInfoObj, setMatchInfoObj] = useState<null | matchInfoObj>(null);\n  const defaultLogo = \"https://www.svgrepo.com/show/133513/shield.svg\";\n  // use useState to decide whether the team is subscribed\n  const [awaySubs, setAwaySubs] = useState(false);\n  const [homeSubs, setHomeSubs] = useState(false);\n\n  // toggle subscribe away team\n  const handleAwayBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === props.awayTeam)) {\n        // remove the name from array\n        setAwaySubs(false);\n        const arr = teamsParsed.filter(\n          (teamName: string) => teamName !== props.awayTeam\n        );\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setAwaySubs(true);\n        teamsParsed.push(props.awayTeam);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setAwaySubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([props.awayTeam]));\n    }\n  };\n\n  // toggle subscribe home team\n  const handleHomeBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === props.homeTeam)) {\n        // remove the name from array\n        setHomeSubs(false);\n        const arr = teamsParsed.filter(\n          (teamName: string) => teamName !== props.homeTeam\n        );\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setHomeSubs(true);\n        teamsParsed.push(props.homeTeam);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setHomeSubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([props.homeTeam]));\n    }\n  };\n\n  const navigate = useNavigate();\n  const handleAwayTeamClick = () => {\n    navigate(\n      `/teamInfo/${props.leagueType}/${\n        props.awayId ? props.awayId : matchInfoObj?.awayId\n      }`\n    );\n  };\n\n  const handleHomeTeamClick = () => {\n    navigate(\n      `/teamInfo/${props.leagueType}/${\n        props.homeId ? props.homeId : matchInfoObj?.homeId\n      }`\n    );\n  };\n\n  useEffect(() => {\n    // parse matchInfo data\n    const matchInfoObjString = localStorage.getItem(\"matchInfoObj\");\n    matchInfoObjString && setMatchInfoObj(JSON.parse(matchInfoObjString));\n\n    // check whethther team is subscribed\n    const subscribedTeamsString = localStorage.getItem(\"subscribedTeams\");\n    const subscribedTeams: string[] =\n      subscribedTeamsString && JSON.parse(subscribedTeamsString);\n    const isHomeSub = props.homeTeam\n      ? subscribedTeams?.some((team) => team === props.homeTeam)\n      : matchInfoObj &&\n        subscribedTeams?.some((team) => team === matchInfoObj.homeTeam);\n    if (isHomeSub) {\n      setHomeSubs(true);\n    }\n    const isAwaySub = props.awayTeam\n      ? subscribedTeams?.some((team) => team === props.awayTeam)\n      : matchInfoObj &&\n        subscribedTeams?.some((team) => team === matchInfoObj.awayTeam);\n    if (isAwaySub) {\n      setAwaySubs(true);\n    }\n  }, []);\n\n  return (\n    <div>\n      <div className={styles.matchTeams}>\n        <div className={styles.leagueAndDate}>\n          <div className={styles.categories}>\n            <span\n              onClick={() =>\n                props.leagueType === \"nba\"\n                  ? navigate(\"/leagueInfo/nba\")\n                  : navigate(\"/leagueInfo/mlb\")\n              }\n              className={styles.sportCategory}\n            >\n              {(props.leagueType\n                ? props.leagueType\n                : matchInfoObj?.leagueType) === \"nba\"\n                ? \"Basketball\"\n                : \"Baseball\"}\n            </span>\n            <img\n              className={styles.triangleRight}\n              src={triangleRight}\n              alt=\"triangleRight.svg\"\n            />\n            <span\n              onClick={() =>\n                props.leagueType === \"nba\"\n                  ? navigate(\"/leagueInfo/nba\")\n                  : navigate(\"/leagueInfo/mlb\")\n              }\n              className={styles.leagueCategory}\n            >\n              {props.league ? props.league : matchInfoObj?.league}\n            </span>\n            <img\n              className={styles.triangleRight}\n              src={triangleRight}\n              alt=\"triangleRight.svg\"\n            />\n          </div>\n          <span className={styles.matchDate}>\n            {props.date ? props.date : matchInfoObj?.date}\n          </span>\n        </div>\n        <img\n          className={styles.subscriptionStatus}\n          src={awaySubs ? bellSolidIcon : bellEmptyIcon}\n          alt=\"bellEmptyIcon.svg\"\n          onClick={handleAwayBellClicked}\n        />\n        <div className={styles.away}>\n          <h3 className={styles.awayName}>\n            {props.awayTeam ? props.awayTeam : matchInfoObj?.awayTeam}\n          </h3>\n          <img\n            className={styles.logo}\n            src={\n              props.awayLogo\n                ? props.awayLogo\n                : matchInfoObj?.awayLogo\n                ? matchInfoObj?.awayLogo\n                : defaultLogo\n            }\n            alt=\"awayLogo.svg\"\n            onClick={handleAwayTeamClick}\n          />\n        </div>\n        <div className={styles.scores}>\n          <span className={styles.awayScore}>\n            {props.awayTotal ? props.awayTotal : matchInfoObj?.awayTotal}\n          </span>\n          <span>-</span>\n          <span className={styles.homeScore}>\n            {props.homeTotal ? props.homeTotal : matchInfoObj?.homeTotal}\n          </span>\n        </div>\n        <div className={styles.home}>\n          <h3 className={styles.homeName}>\n            {props.homeTeam ? props.homeTeam : matchInfoObj?.homeTeam}\n          </h3>\n          <img\n            className={styles.logo}\n            src={\n              props.homeLogo\n                ? props.homeLogo\n                : matchInfoObj?.homeLogo\n                ? matchInfoObj?.homeLogo\n                : defaultLogo\n            }\n            alt=\"homeLogo.svg\"\n            onClick={handleHomeTeamClick}\n          />\n        </div>\n        <img\n          className={styles.subscriptionStatus}\n          src={homeSubs ? bellSolidIcon : bellEmptyIcon}\n          alt=\"bellEmptyIcon.svg\"\n          onClick={handleHomeBellClicked}\n        />\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/matchInfo/matchInfoComponents/matchInfoBottom/matchInfoBottomComponents/MobileStatsMenu.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/reducer/seasonReducer.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/leagueInfo/leagueInfoComponents/leftSectionComponents/dummyMlbStandings.ts",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarDays.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarDates.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/calendar/calendarComponents/CalendarTitle.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/leftSection/leagues/leaguesComponents/LeagueItem.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/MlbMatchItem.tsx",["325","326","327","328"],["329"],"import bellEmptyIcon from \"icons/bellEmptyIcon.svg\";\nimport bellSolidIcon from \"icons/bellSolidIcon.svg\";\nimport {\n  mlbMatchItemProps,\n  matchDataObjType,\n  showFavorites,\n  showSportType,\n} from \"types/types\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { MatchContext } from \"context/MatchContext\";\nimport { getMlbMatchScore } from \"api/mlb\";\nimport { dummyMlbMatch } from \"./dummyMlbMatch\";\nimport clsx from \"clsx\";\nimport styles from \"./MlbMatchItem.module.scss\";\n\ninterface combinedTypes\n  extends mlbMatchItemProps,\n    showFavorites,\n    showSportType {}\n\nexport default function MlbMatchItem(props: combinedTypes) {\n  // use useState to decide whether the team is subscribed\n  const [awaySubs, setAwaySubs] = useState(false);\n  const [homeSubs, setHomeSubs] = useState(false);\n\n  // extract props teams\n  const away = props.away;\n  const home = props.home;\n  // extract props id\n  const awayId = Number(props?.teamIDAway);\n  const homeId = Number(props?.teamIDHome);\n  // extract props time\n  const colonIndex = props?.gameTime?.indexOf(\":\");\n  const timeLength = props?.gameTime?.length;\n  let matchHour: string | undefined = \"0\";\n  if (timeLength === 5) {\n    matchHour = props?.gameTime?.slice(\n      colonIndex && colonIndex - 1,\n      colonIndex && colonIndex + 4\n    );\n    matchHour += \"m\";\n  } else {\n    matchHour = props.gameTime?.slice(\n      colonIndex && colonIndex - 2,\n      colonIndex && colonIndex + 4\n    );\n    matchHour += \"m\";\n  }\n  // set useState matchInforation\n  const [matchDataObj, setMatchDataObj] = useState<matchDataObjType | null>(\n    null\n  );\n\n  const matchAwayScore = matchDataObj && matchDataObj?.lineScore?.away?.R;\n  const matchHomeScore = matchDataObj?.lineScore?.home?.R;\n\n  // identify MLB sport type to dispatch to Feature Match\n  const leagueType =\n    away && home && (away.length < 4 || home.length < 4) ? \"mlb\" : \"\";\n\n  // dispatch match\n  const { dispatch } = useContext(MatchContext);\n  const handleMatchClick = () => {\n    dispatch({\n      type: \"selectFeaturedMatch\",\n      awayTeam: {\n        id: awayId,\n        nickname: away,\n      },\n      homeTeam: {\n        id: homeId,\n        nickname: home,\n      },\n      scores: {\n        awayTotal: matchAwayScore,\n        homeTotal: matchHomeScore,\n      },\n      leagueType: leagueType,\n      id: props.gameID,\n      matchHour: matchHour,\n    });\n\n    // eslint-disable-next-line no-restricted-globals\n    if (screen.width <= 1010) {\n      window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\n    }\n  };\n\n  // toggle subscribe away team\n  const handleAwayBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === away)) {\n        // remove the name from array\n        setAwaySubs(false);\n        const arr = teamsParsed.filter((teamName: string) => teamName !== away);\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setAwaySubs(true);\n        teamsParsed.push(away);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setAwaySubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([away]));\n    }\n  };\n\n  // toggle subscribe home team\n  const handleHomeBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === home)) {\n        // remove the name from array\n        setHomeSubs(false);\n        const arr = teamsParsed.filter((teamName: string) => teamName !== home);\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setHomeSubs(true);\n        teamsParsed.push(home);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setHomeSubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([home]));\n    }\n  };\n\n  useEffect(() => {\n    setMatchDataObj(dummyMlbMatch[props.gameID as keyof object]);\n  }, []);\n\n  // // get per match information\n  // useEffect(() => {\n  //   console.log(\"re-render useEffect\");\n  //   const asynGetMlbMatchScore = async () => {\n  //     const response = props?.gameID && (await getMlbMatchScore(props.gameID));\n  //     response && console.log(response.data);\n  //     // const response = props?.gameID && (await getMlbMatchScore(props.gameID));\n  //     // response && setMatchDataObj(response.data.body);\n  //   };\n  //   asynGetMlbMatchScore();\n  // }, [props?.gameID]);\n\n  // dispath the latest match\n  useEffect(() => {\n    dispatch({\n      type: \"selectFeaturedMatch\",\n      awayTeam: {\n        id: awayId,\n        nickname: away,\n      },\n      homeTeam: {\n        id: homeId,\n        nickname: home,\n      },\n      scores: {\n        awayTotal: matchAwayScore,\n        homeTotal: matchHomeScore,\n      },\n      leagueType: leagueType,\n      id: props.gameID,\n      matchHour: matchHour,\n    });\n  }, [matchAwayScore, matchHomeScore]);\n\n  // decide whether the subscription bell should be solid\n  useEffect(() => {\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if away teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === away)) {\n        setAwaySubs(true);\n      }\n      // if home teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === home)) {\n        setHomeSubs(true);\n      }\n    }\n  }, []);\n\n  return (\n    <div\n      className={clsx(styles.matchItem, {\n        [styles.notInFavorite]: props.showFavorites && !awaySubs && !homeSubs,\n      })}\n      onClick={handleMatchClick}\n    >\n      <div className={styles.matchSchedule}>\n        <div className={styles.matchTime}>{matchHour}</div>\n        <div className={styles.matchProgress}>\n          {matchDataObj?.currentInning === \"Final\"\n            ? \"FT\"\n            : matchDataObj?.currentInning}\n        </div>\n      </div>\n      <div className={styles.matchScoreBox}>\n        <div className={styles.matchTeams}>\n          <div className={styles.away}>{away}</div>\n          <div className={styles.home}>{home}</div>\n        </div>\n        <div className={styles.matchScores}>\n          <div className={styles.awayScore}>{matchAwayScore}</div>\n          <div className={styles.homeScore}>{matchHomeScore}</div>\n        </div>\n      </div>\n      <div className={styles.subscriptions}>\n        <div className={styles.awayBell} onClick={handleAwayBellClicked}>\n          <img\n            src={awaySubs ? bellSolidIcon : bellEmptyIcon}\n            alt=\"subscribeBell.svg\"\n          />\n        </div>\n        <div className={styles.homeBell} onClick={handleHomeBellClicked}>\n          <img\n            src={homeSubs ? bellSolidIcon : bellEmptyIcon}\n            alt=\"subscribeBell.svg\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/NbaMatchItem.tsx",["330"],["331"],"import bellEmptyIcon from \"icons/bellEmptyIcon.svg\";\nimport bellSolidIcon from \"icons/bellSolidIcon.svg\";\nimport { nbaMatchItemProps, showFavorites, showSportType } from \"types/types\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { MatchContext } from \"context/MatchContext\";\nimport clsx from \"clsx\";\nimport styles from \"./NbaMatchItem.module.scss\";\n\ninterface combinedTypes\n  extends nbaMatchItemProps,\n    showFavorites,\n    showSportType {}\n\nexport default function NbaMatchItem(props: combinedTypes) {\n  // use useState to decide whether the team is subscribed\n  const [awaySubs, setAwaySubs] = useState(false);\n  const [homeSubs, setHomeSubs] = useState(false);\n\n  // toggle subscribe away team\n  const handleAwayBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    const awayTeamName = teams?.visitors?.nickname;\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === awayTeamName)) {\n        // remove the name from array\n        setAwaySubs(false);\n        const arr = teamsParsed.filter(\n          (teamName: string) => teamName !== awayTeamName\n        );\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setAwaySubs(true);\n        teamsParsed.push(awayTeamName);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setAwaySubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([awayTeamName]));\n    }\n  };\n\n  // toggle subscribe home team\n  const handleHomeBellClicked = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    // if localStorage has data\n    const homeTeamName = teams?.home?.nickname;\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === homeTeamName)) {\n        // remove the name from array\n        setHomeSubs(false);\n        const arr = teamsParsed.filter(\n          (teamName: string) => teamName !== homeTeamName\n        );\n        teamsParsed = arr;\n      }\n      // if teamName does not exists\n      else {\n        setHomeSubs(true);\n        teamsParsed.push(homeTeamName);\n      }\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify(teamsParsed));\n    }\n    // if localStorage has no data\n    else {\n      setHomeSubs(true);\n      localStorage.setItem(\"subscribedTeams\", JSON.stringify([homeTeamName]));\n    }\n  };\n\n  // extract props teams\n  const teams = props.teams;\n  // extract props away scores\n  const awayLinescore = props?.scores?.visitors?.linescore;\n  const awayTotal = awayLinescore?.reduce(\n    (accum: number, curr: number): number => Number(accum) + Number(curr)\n  );\n  // extract props home scores\n  const homeLinescore = props?.scores?.home?.linescore;\n  const homeTotal = homeLinescore?.reduce(\n    (accum: number, curr: number): number => Number(accum) + Number(curr)\n  );\n  // extract props date, then slice the match hour from Sun, 02 Apr 2023 00:30:00 GMT\n  const date = props?.date?.start;\n  const utcDate = date && new Date(date);\n  const colonIndex = utcDate?.toString()?.indexOf(\":\");\n  const matchHour = utcDate\n    ?.toString()\n    ?.slice(colonIndex && colonIndex - 2, colonIndex && colonIndex + 3);\n  //extract props match periods\n  const periods = props.periods;\n  const leagueType = periods?.total === 4 ? \"nba\" : \"\";\n  // dispatch match\n  const { dispatch } = useContext(MatchContext);\n  const handleMatchClick = () => {\n    dispatch({\n      type: \"selectFeaturedMatch\",\n      awayTeam: {\n        id: teams?.visitors?.id,\n        nickname: teams?.visitors?.nickname,\n        logo: teams?.visitors?.logo,\n      },\n      homeTeam: {\n        id: teams?.home?.id,\n        nickname: teams?.home?.nickname,\n        logo: teams?.home?.logo,\n      },\n      scores: {\n        awayTotal: awayTotal && awayTotal,\n        homeTotal: homeTotal && homeTotal,\n      },\n      leagueType: leagueType,\n      id: props.id,\n      matchHour: matchHour,\n    });\n    // eslint-disable-next-line no-restricted-globals\n    if (screen.width <= 1010) {\n      window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\n    }\n  };\n\n  // dispatch the latest match\n  useEffect(() => {\n    dispatch({\n      type: \"selectFeaturedMatch\",\n      awayTeam: {\n        id: teams?.visitors?.id,\n        nickname: teams?.visitors?.nickname,\n      },\n      homeTeam: {\n        id: teams?.home?.id,\n        nickname: teams?.home?.nickname,\n      },\n      scores: {\n        awayTotal: awayTotal && awayTotal,\n        homeTotal: homeTotal && homeTotal,\n      },\n      leagueType: leagueType,\n      id: props.id,\n      matchHour: matchHour,\n    });\n  }, [props]);\n\n  // decide whether the subscription bell should be solid\n  useEffect(() => {\n    const awayTeamName = teams?.visitors?.nickname;\n    const homeTeamName = teams?.home?.nickname;\n    if (localStorage.getItem(\"subscribedTeams\") !== null) {\n      const team = localStorage.getItem(\"subscribedTeams\");\n      let teamsParsed = team && JSON.parse(team);\n      // if away teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === awayTeamName)) {\n        setAwaySubs(true);\n      } else {\n        setAwaySubs(false);\n      }\n      // if home teamName existed in localStorage\n      if (teamsParsed.some((teamName: string) => teamName === homeTeamName)) {\n        setHomeSubs(true);\n      } else {\n        setHomeSubs(false);\n      }\n    }\n  }, [teams?.home?.nickname, teams?.visitors?.nickname]);\n\n  return (\n    <div\n      id={styles.matchItem}\n      className={clsx(styles.matchItem, {\n        [styles.notInFavorite]: props.showFavorites && !awaySubs && !homeSubs,\n      })}\n      onClick={handleMatchClick}\n    >\n      <div className={styles.matchSchedule}>\n        <div className={styles.matchTime}>{matchHour}</div>\n        <div className={styles.matchProgress}>\n          {periods?.current === 4 ? \"FT\" : periods?.current}\n        </div>\n      </div>\n      <div className={styles.matchScoreBox}>\n        <div className={styles.matchTeams}>\n          <div className={styles.away}>{teams?.visitors?.nickname}</div>\n          <div className={styles.home}>{teams?.home?.nickname}</div>\n        </div>\n        <div className={styles.matchScores}>\n          <div className={styles.awayScore}>{awayTotal}</div>\n          <div className={styles.homeScore}>{homeTotal}</div>\n        </div>\n      </div>\n      <div className={styles.subscriptions}>\n        <div className={styles.awayBell} onClick={handleAwayBellClicked}>\n          <img\n            src={awaySubs ? bellSolidIcon : bellEmptyIcon}\n            alt=\"subscribeBell.svg\"\n          />\n        </div>\n        <div className={styles.homeBell} onClick={handleHomeBellClicked}>\n          <img\n            src={homeSubs ? bellSolidIcon : bellEmptyIcon}\n            alt=\"subscribeBell.svg\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/matchesComponents/MatchesLeft.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/leaguePlayedTop/LeaguePlayedTop.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/middleSectionComponents/matches/dummyMlbMatch.tsx",[],[],"/Users/sutaoliang/live-score/frontend/src/components/teamInfo/teamInfoComponents/leftSectionComponents/matchesComponents/matchesLeftComponents/MatchLeftMatchItem.tsx",[],[],{"ruleId":"332","severity":1,"message":"333","line":113,"column":6,"nodeType":"334","endLine":113,"endColumn":35,"suggestions":"335"},{"ruleId":"336","severity":1,"message":"337","line":5,"column":23,"nodeType":"338","messageId":"339","endLine":5,"endColumn":35},{"ruleId":"336","severity":1,"message":"340","line":6,"column":10,"nodeType":"338","messageId":"339","endLine":6,"endColumn":21},{"ruleId":"336","severity":1,"message":"341","line":28,"column":26,"nodeType":"338","messageId":"339","endLine":28,"endColumn":43},{"ruleId":"336","severity":1,"message":"342","line":56,"column":10,"nodeType":"338","messageId":"339","endLine":56,"endColumn":17},{"ruleId":"343","severity":1,"message":"344","line":39,"column":67,"nodeType":"345","messageId":"346","endLine":39,"endColumn":69},{"ruleId":"332","severity":1,"message":"347","line":83,"column":6,"nodeType":"334","endLine":83,"endColumn":60,"suggestions":"348"},{"ruleId":"336","severity":1,"message":"349","line":4,"column":10,"nodeType":"338","messageId":"339","endLine":4,"endColumn":19},{"ruleId":"343","severity":1,"message":"350","line":132,"column":61,"nodeType":"345","messageId":"351","endLine":132,"endColumn":63},{"ruleId":"343","severity":1,"message":"350","line":174,"column":61,"nodeType":"345","messageId":"351","endLine":174,"endColumn":63},{"ruleId":"336","severity":1,"message":"352","line":5,"column":10,"nodeType":"338","messageId":"339","endLine":5,"endColumn":15},{"ruleId":"332","severity":1,"message":"353","line":47,"column":22,"nodeType":"354","endLine":47,"endColumn":72},{"ruleId":"332","severity":1,"message":"355","line":116,"column":6,"nodeType":"334","endLine":116,"endColumn":8,"suggestions":"356"},{"ruleId":"336","severity":1,"message":"357","line":11,"column":10,"nodeType":"338","messageId":"339","endLine":11,"endColumn":26},{"ruleId":"332","severity":1,"message":"358","line":147,"column":6,"nodeType":"334","endLine":147,"endColumn":8,"suggestions":"359"},{"ruleId":"332","severity":1,"message":"360","line":181,"column":6,"nodeType":"334","endLine":181,"endColumn":38,"suggestions":"361"},{"ruleId":"332","severity":1,"message":"362","line":197,"column":6,"nodeType":"334","endLine":197,"endColumn":8,"suggestions":"363"},{"ruleId":"364","severity":2,"message":"365","line":84,"column":9,"nodeType":"338","messageId":"366","endLine":84,"endColumn":15,"suppressions":"367"},{"ruleId":"332","severity":1,"message":"368","line":152,"column":6,"nodeType":"334","endLine":152,"endColumn":13,"suggestions":"369"},{"ruleId":"364","severity":2,"message":"365","line":127,"column":9,"nodeType":"338","messageId":"366","endLine":127,"endColumn":15,"suppressions":"370"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allMlbTeams', 'dispatch', and 'match'. Either include them or remove the dependency array.","ArrayExpression",["371"],"@typescript-eslint/no-unused-vars","'getLiveGames' is defined but never used.","Identifier","unusedVar","'getMlbGames' is defined but never used.","'setMlbGamesOnDate' is assigned a value but never used.","'showMlb' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'match?.awayTeam?.id' and 'match?.homeTeam?.id'. Either include them or remove the dependency array.",["372"],"'useParams' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'match' is defined but never used.","Assignments to the 'periodsPercent' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","React Hook useEffect has missing dependencies: 'matchInfoObj', 'props.awayTeam', and 'props.homeTeam'. Either include them or remove the dependency array.",["373"],"'getMlbMatchScore' is defined but never used.","React Hook useEffect has a missing dependency: 'props.gameID'. Either include it or remove the dependency array. If 'setMatchDataObj' needs the current value of 'props.gameID', you can also switch to useReducer instead of useState and read 'props.gameID' in the reducer.",["374"],"React Hook useEffect has missing dependencies: 'away', 'awayId', 'dispatch', 'home', 'homeId', 'leagueType', 'matchHour', and 'props.gameID'. Either include them or remove the dependency array.",["375"],"React Hook useEffect has missing dependencies: 'away' and 'home'. Either include them or remove the dependency array.",["376"],"no-restricted-globals","Unexpected use of 'screen'.","defaultMessage",["377"],"React Hook useEffect has missing dependencies: 'awayTotal', 'dispatch', 'homeTotal', 'leagueType', 'matchHour', 'teams?.home?.id', 'teams?.home?.nickname', 'teams?.visitors?.id', and 'teams?.visitors?.nickname'. Either include them or remove the dependency array.",["378"],["379"],{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"kind":"392","justification":"393"},{"desc":"394","fix":"395"},{"kind":"392","justification":"393"},"Update the dependencies array to be: [allMlbTeams, dispatch, match, props.league, props.matches]",{"range":"396","text":"397"},"Update the dependencies array to be: [homeTeam, props.showSport, allNbaTeams, allMlbTeams, match?.homeTeam?.id, match?.awayTeam?.id]",{"range":"398","text":"399"},"Update the dependencies array to be: [matchInfoObj, props.awayTeam, props.homeTeam]",{"range":"400","text":"401"},"Update the dependencies array to be: [props.gameID]",{"range":"402","text":"403"},"Update the dependencies array to be: [away, awayId, dispatch, home, homeId, leagueType, matchAwayScore, matchHomeScore, matchHour, props.gameID]",{"range":"404","text":"405"},"Update the dependencies array to be: [away, home]",{"range":"406","text":"407"},"directive","","Update the dependencies array to be: [awayTotal, dispatch, homeTotal, leagueType, matchHour, props, teams?.home?.id, teams?.home?.nickname, teams?.visitors?.id, teams?.visitors?.nickname]",{"range":"408","text":"409"},[4006,4035],"[allMlbTeams, dispatch, match, props.league, props.matches]",[3082,3136],"[homeTeam, props.showSport, allNbaTeams, allMlbTeams, match?.homeTeam?.id, match?.awayTeam?.id]",[4107,4109],"[matchInfoObj, props.awayTeam, props.homeTeam]",[4614,4616],"[props.gameID]",[5549,5581],"[away, awayId, dispatch, home, homeId, leagueType, matchAwayScore, matchHomeScore, matchHour, props.gameID]",[6156,6158],"[away, home]",[5101,5108],"[awayTotal, dispatch, homeTotal, leagueType, matchHour, props, teams?.home?.id, teams?.home?.nickname, teams?.visitors?.id, teams?.visitors?.nickname]"]