{"ast":null,"code":"import _defineProperty from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _regeneratorRuntime from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import LeagueNbaPlayed from\"./middleSectionComponents/LeagueNbaPlayed\";import LeagueMlbPlayed from\"./middleSectionComponents/LeagueMlbPlayed\";import{DateContext}from\"context/DateContext\";import{useContext,useEffect,useState}from\"react\";import{getAllGames}from\"api/nba\";import{dummyMlbGames}from\"./dummyMlbGames\";import clsx from\"clsx\";import styles from\"./MiddleSection.module.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function MiddleSection(props){// use useState to get all games data\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),nbaGamesOnDate=_useState2[0],setNbaGamesOnDate=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),mlbGamesOnDate=_useState4[0],setMlbGamesOnDate=_useState4[1];var _useContext=useContext(DateContext),state=_useContext.state;// turn the date into db schema format\nvar nbaDate=\"\".concat(state.year,\"-\");var mlbDate=\"\".concat(state.year);// avoid possibly only single digit number\nif(state.monthIndex&&state.monthIndex<9){nbaDate+=\"0\".concat(state.monthIndex&&state.monthIndex+1,\"-\");mlbDate+=\"0\".concat(state.monthIndex&&state.monthIndex+1);}else{nbaDate+=\"\".concat(state.monthIndex&&state.monthIndex+1,\"-\");mlbDate+=\"\".concat(state.monthIndex&&state.monthIndex+1);}if(state.date&&state.date<10){nbaDate+=\"0\".concat(state.date);mlbDate+=\"0\".concat(state.date);}else{nbaDate+=\"\".concat(state.date);mlbDate+=\"\".concat(state.date);}// control whether nba games should be shown\nvar _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),showNba=_useState6[0],setShowNba=_useState6[1];// control whether mlb games should be shown\nvar _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),showMlb=_useState8[0],setShowMlb=_useState8[1];// get nba games\nuseEffect(function(){var asyncGetAllGames=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return getAllGames(nbaDate);case 2:response=_context.sent;setNbaGamesOnDate(response&&response.data.response);case 4:case\"end\":return _context.stop();}},_callee);}));return function asyncGetAllGames(){return _ref.apply(this,arguments);};}();asyncGetAllGames();},[nbaDate]);useEffect(function(){// control whether nba games should be shown\nif(props.showSport===\"basketball\"||props.showSport===\"all\"){if(nbaGamesOnDate&&Object.values(nbaGamesOnDate).length){setShowNba(true);}else{setShowNba(false);}}else{setShowNba(false);}},[props.showSport,nbaDate,nbaGamesOnDate]);// useEffect(() => {\n//   const asyncGetMlbGames = async () => {\n//     const response = await getMlbGames(mlbDate);\n//     // setMlbGamesOnDate(response && response?.data?.body);\n//     console.log(response);\n//   };\n//   asyncGetMlbGames();\n// }, [mlbDate]);\nuseEffect(function(){// control whether mlb games should be shown\nif(props.showSport===\"baseball\"||props.showSport===\"all\"){if(mlbGamesOnDate&&Object.values(mlbGamesOnDate)[0]){setShowMlb(true);}}},[props.showSport,mlbGamesOnDate]);return/*#__PURE__*/_jsxs(\"div\",{className:clsx(_defineProperty({},styles.noShow,props.showMobileIcon===\"leagues\"),styles.middleSection),children:[/*#__PURE__*/_jsx(\"h3\",{className:styles.middleTitle,ref:props.middleSecRef,children:props.showFavorites?\"Favorite teams games\":\"Pinned Games\"}),showNba&&nbaGamesOnDate&&mlbDate===\"20230718\"&&dummyMlbGames&&props.showSport===\"all\"?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(LeagueNbaPlayed,{nbaGames:nbaGamesOnDate,showSport:props.showSport,showFavorites:props.showFavorites}),/*#__PURE__*/_jsx(LeagueMlbPlayed,{mlbGames:dummyMlbGames,showSport:props.showSport,showFavorites:props.showFavorites})]}):showNba&&nbaGamesOnDate?/*#__PURE__*/_jsx(LeagueNbaPlayed,{nbaGames:nbaGamesOnDate,showSport:props.showSport,showFavorites:props.showFavorites}):mlbDate===\"20230718\"&&dummyMlbGames&&(props.showSport===\"baseball\"||props.showSport===\"all\")?/*#__PURE__*/_jsx(LeagueMlbPlayed,{mlbGames:dummyMlbGames,showSport:props.showSport,showFavorites:props.showFavorites}):/*#__PURE__*/_jsxs(\"div\",{className:styles.noEventsWrapper,children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://www.sofascore.com/static/images/empty_state/empty-state-no-events-1.svg\",alt:\"noEvent.svg\"}),/*#__PURE__*/_jsx(\"h2\",{className:styles.emptyData,children:\"No Events\"})]})]});}","map":{"version":3,"names":["LeagueNbaPlayed","LeagueMlbPlayed","DateContext","useContext","useEffect","useState","getAllGames","dummyMlbGames","clsx","styles","jsx","_jsx","jsxs","_jsxs","MiddleSection","props","_useState","_useState2","_slicedToArray","nbaGamesOnDate","setNbaGamesOnDate","_useState3","_useState4","mlbGamesOnDate","setMlbGamesOnDate","_useContext","state","nbaDate","concat","year","mlbDate","monthIndex","date","_useState5","_useState6","showNba","setShowNba","_useState7","_useState8","showMlb","setShowMlb","asyncGetAllGames","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","sent","data","stop","apply","arguments","showSport","Object","values","length","className","_defineProperty","noShow","showMobileIcon","middleSection","children","middleTitle","ref","middleSecRef","showFavorites","nbaGames","mlbGames","noEventsWrapper","src","alt","emptyData"],"sources":["/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/MiddleSection.tsx"],"sourcesContent":["import LeagueNbaPlayed from \"./middleSectionComponents/LeagueNbaPlayed\";\nimport LeagueMlbPlayed from \"./middleSectionComponents/LeagueMlbPlayed\";\nimport { DateContext } from \"context/DateContext\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getAllGames, getLiveGames } from \"api/nba\";\nimport { getMlbGames } from \"api/mlb\";\nimport { dummyMlbGames } from \"./dummyMlbGames\";\nimport {\n  showSportType,\n  showFavorites,\n  middleSecRef,\n  onMobileIcon,\n} from \"types/types\";\nimport clsx from \"clsx\";\nimport styles from \"./MiddleSection.module.scss\";\n\ninterface combinedType\n  extends showFavorites,\n    showSportType,\n    middleSecRef,\n    onMobileIcon {}\n\nexport default function MiddleSection(props: combinedType) {\n  // use useState to get all games data\n  const [nbaGamesOnDate, setNbaGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const [mlbGamesOnDate, setMlbGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const { state } = useContext(DateContext);\n\n  // turn the date into db schema format\n  let nbaDate = `${state.year}-`;\n  let mlbDate = `${state.year}`;\n  // avoid possibly only single digit number\n  if (state.monthIndex && state.monthIndex < 9) {\n    nbaDate += `0${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `0${state.monthIndex && state.monthIndex + 1}`;\n  } else {\n    nbaDate += `${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `${state.monthIndex && state.monthIndex + 1}`;\n  }\n  if (state.date && state.date < 10) {\n    nbaDate += `0${state.date}`;\n    mlbDate += `0${state.date}`;\n  } else {\n    nbaDate += `${state.date}`;\n    mlbDate += `${state.date}`;\n  }\n\n  // control whether nba games should be shown\n  const [showNba, setShowNba] = useState<boolean | null>(null);\n\n  // control whether mlb games should be shown\n  const [showMlb, setShowMlb] = useState<boolean | null>(null);\n\n  // get nba games\n  useEffect(() => {\n    const asyncGetAllGames = async () => {\n      const response = await getAllGames(nbaDate);\n      setNbaGamesOnDate(response && response.data.response);\n    };\n    asyncGetAllGames();\n  }, [nbaDate]);\n\n  useEffect(() => {\n    // control whether nba games should be shown\n    if (props.showSport === \"basketball\" || props.showSport === \"all\") {\n      if (nbaGamesOnDate && Object.values(nbaGamesOnDate).length) {\n        setShowNba(true);\n      } else {\n        setShowNba(false);\n      }\n    } else {\n      setShowNba(false);\n    }\n  }, [props.showSport, nbaDate, nbaGamesOnDate]);\n\n  // useEffect(() => {\n  //   const asyncGetMlbGames = async () => {\n  //     const response = await getMlbGames(mlbDate);\n  //     // setMlbGamesOnDate(response && response?.data?.body);\n  //     console.log(response);\n  //   };\n  //   asyncGetMlbGames();\n  // }, [mlbDate]);\n\n  useEffect(() => {\n    // control whether mlb games should be shown\n    if (props.showSport === \"baseball\" || props.showSport === \"all\") {\n      if (mlbGamesOnDate && Object.values(mlbGamesOnDate)[0]) {\n        setShowMlb(true);\n      }\n    }\n  }, [props.showSport, mlbGamesOnDate]);\n  return (\n    <div\n      className={clsx(\n        { [styles.noShow]: props.showMobileIcon === \"leagues\" },\n        styles.middleSection\n      )}\n    >\n      <h3 className={styles.middleTitle} ref={props.middleSecRef}>\n        {props.showFavorites ? \"Favorite teams games\" : \"Pinned Games\"}\n      </h3>\n      {/* dummy data不管輸入資料是否正確，都會render，因此這邊需要判斷式來比對是否當天有資料 */}\n      {showNba &&\n      nbaGamesOnDate &&\n      mlbDate === \"20230718\" &&\n      dummyMlbGames &&\n      props.showSport === \"all\" ? (\n        <div>\n          <LeagueNbaPlayed\n            nbaGames={nbaGamesOnDate}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n          <LeagueMlbPlayed\n            mlbGames={dummyMlbGames}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n        </div>\n      ) : showNba && nbaGamesOnDate ? (\n        <LeagueNbaPlayed\n          nbaGames={nbaGamesOnDate}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : mlbDate === \"20230718\" &&\n        dummyMlbGames &&\n        (props.showSport === \"baseball\" || props.showSport === \"all\") ? (\n        <LeagueMlbPlayed\n          mlbGames={dummyMlbGames}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : (\n        <div className={styles.noEventsWrapper}>\n          <img\n            src=\"https://www.sofascore.com/static/images/empty_state/empty-state-no-events-1.svg\"\n            alt=\"noEvent.svg\"\n          />\n          <h2 className={styles.emptyData}>No Events</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}