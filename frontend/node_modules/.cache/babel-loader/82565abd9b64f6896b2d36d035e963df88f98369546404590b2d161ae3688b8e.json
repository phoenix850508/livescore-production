{"ast":null,"code":"var _jsxFileName = \"/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/MiddleSection.tsx\",\n  _s = $RefreshSig$();\nimport LeagueNbaPlayed from \"./middleSectionComponents/LeagueNbaPlayed\";\nimport LeagueMlbPlayed from \"./middleSectionComponents/LeagueMlbPlayed\";\nimport { DateContext } from \"context/DateContext\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getAllGames } from \"api/nba\";\nimport { dummyMlbGames } from \"./dummyMlbGames\";\nimport clsx from \"clsx\";\nimport styles from \"./MiddleSection.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MiddleSection(props) {\n  _s();\n  // use useState to get all games data\n  const [nbaGamesOnDate, setNbaGamesOnDate] = useState(null);\n  const [mlbGamesOnDate, setMlbGamesOnDate] = useState(null);\n  const {\n    state\n  } = useContext(DateContext);\n\n  // turn the date into db schema format\n  let nbaDate = `${state.year}-`;\n  let mlbDate = `${state.year}`;\n  // avoid possibly only single digit number\n  if (state.monthIndex && state.monthIndex < 9) {\n    nbaDate += `0${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `0${state.monthIndex && state.monthIndex + 1}`;\n  } else {\n    nbaDate += `${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `${state.monthIndex && state.monthIndex + 1}`;\n  }\n  if (state.date && state.date < 10) {\n    nbaDate += `0${state.date}`;\n    mlbDate += `0${state.date}`;\n  } else {\n    nbaDate += `${state.date}`;\n    mlbDate += `${state.date}`;\n  }\n\n  // control whether nba games should be shown\n  const [showNba, setShowNba] = useState(null);\n\n  // control whether mlb games should be shown\n  const [showMlb, setShowMlb] = useState(null);\n\n  // get nba games\n  useEffect(() => {\n    const asyncGetAllGames = async () => {\n      const response = await getAllGames(nbaDate);\n      setNbaGamesOnDate(response && response.data.response);\n    };\n    asyncGetAllGames();\n  }, [nbaDate]);\n  useEffect(() => {\n    // control whether nba games should be shown\n    if (props.showSport === \"basketball\" || props.showSport === \"all\") {\n      if (nbaGamesOnDate && Object.values(nbaGamesOnDate).length) {\n        setShowNba(true);\n      } else {\n        setShowNba(false);\n      }\n    } else {\n      setShowNba(false);\n    }\n  }, [props.showSport, nbaDate, nbaGamesOnDate]);\n\n  // useEffect(() => {\n  //   const asyncGetMlbGames = async () => {\n  //     const response = await getMlbGames(mlbDate);\n  //     // setMlbGamesOnDate(response && response?.data?.body);\n  //     console.log(response);\n  //   };\n  //   asyncGetMlbGames();\n  // }, [mlbDate]);\n\n  useEffect(() => {\n    // control whether mlb games should be shown\n    if (props.showSport === \"baseball\" || props.showSport === \"all\") {\n      if (mlbGamesOnDate && Object.values(mlbGamesOnDate)[0]) {\n        setShowMlb(true);\n      }\n    }\n  }, [props.showSport, mlbGamesOnDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx({\n      [styles.noShow]: props.showMobileIcon === \"leagues\"\n    }, styles.middleSection),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: styles.middleTitle,\n      ref: props.middleSecRef,\n      children: props.showFavorites ? \"Favorite teams games\" : \"Pinned Games\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), showNba && nbaGamesOnDate && mlbDate === \"20230718\" && dummyMlbGames && props.showSport === \"all\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LeagueNbaPlayed, {\n        nbaGames: nbaGamesOnDate,\n        showSport: props.showSport,\n        showFavorites: props.showFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LeagueMlbPlayed, {\n        mlbGames: dummyMlbGames,\n        showSport: props.showSport,\n        showFavorites: props.showFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this) : showNba && nbaGamesOnDate ? /*#__PURE__*/_jsxDEV(LeagueNbaPlayed, {\n      nbaGames: nbaGamesOnDate,\n      showSport: props.showSport,\n      showFavorites: props.showFavorites\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : mlbDate === \"20230718\" && dummyMlbGames && (props.showSport === \"baseball\" || props.showSport === \"all\") ? /*#__PURE__*/_jsxDEV(LeagueMlbPlayed, {\n      mlbGames: dummyMlbGames,\n      showSport: props.showSport,\n      showFavorites: props.showFavorites\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.noEventsWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://www.sofascore.com/static/images/empty_state/empty-state-no-events-1.svg\",\n        alt: \"noEvent.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.emptyData,\n        children: \"No Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(MiddleSection, \"Awb1G8lSuzzdjgxvnH18Z/vRd0U=\");\n_c = MiddleSection;\nvar _c;\n$RefreshReg$(_c, \"MiddleSection\");","map":{"version":3,"names":["LeagueNbaPlayed","LeagueMlbPlayed","DateContext","useContext","useEffect","useState","getAllGames","dummyMlbGames","clsx","styles","jsxDEV","_jsxDEV","MiddleSection","props","_s","nbaGamesOnDate","setNbaGamesOnDate","mlbGamesOnDate","setMlbGamesOnDate","state","nbaDate","year","mlbDate","monthIndex","date","showNba","setShowNba","showMlb","setShowMlb","asyncGetAllGames","response","data","showSport","Object","values","length","className","noShow","showMobileIcon","middleSection","children","middleTitle","ref","middleSecRef","showFavorites","fileName","_jsxFileName","lineNumber","columnNumber","nbaGames","mlbGames","noEventsWrapper","src","alt","emptyData","_c","$RefreshReg$"],"sources":["/Users/sutaoliang/live-score/frontend/src/components/main/middleSection/MiddleSection.tsx"],"sourcesContent":["import LeagueNbaPlayed from \"./middleSectionComponents/LeagueNbaPlayed\";\nimport LeagueMlbPlayed from \"./middleSectionComponents/LeagueMlbPlayed\";\nimport { DateContext } from \"context/DateContext\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getAllGames, getLiveGames } from \"api/nba\";\nimport { getMlbGames } from \"api/mlb\";\nimport { dummyMlbGames } from \"./dummyMlbGames\";\nimport {\n  showSportType,\n  showFavorites,\n  middleSecRef,\n  onMobileIcon,\n} from \"types/types\";\nimport clsx from \"clsx\";\nimport styles from \"./MiddleSection.module.scss\";\n\ninterface combinedType\n  extends showFavorites,\n    showSportType,\n    middleSecRef,\n    onMobileIcon {}\n\nexport default function MiddleSection(props: combinedType) {\n  // use useState to get all games data\n  const [nbaGamesOnDate, setNbaGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const [mlbGamesOnDate, setMlbGamesOnDate] = useState<\n    object | null | undefined\n  >(null);\n  const { state } = useContext(DateContext);\n\n  // turn the date into db schema format\n  let nbaDate = `${state.year}-`;\n  let mlbDate = `${state.year}`;\n  // avoid possibly only single digit number\n  if (state.monthIndex && state.monthIndex < 9) {\n    nbaDate += `0${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `0${state.monthIndex && state.monthIndex + 1}`;\n  } else {\n    nbaDate += `${state.monthIndex && state.monthIndex + 1}-`;\n    mlbDate += `${state.monthIndex && state.monthIndex + 1}`;\n  }\n  if (state.date && state.date < 10) {\n    nbaDate += `0${state.date}`;\n    mlbDate += `0${state.date}`;\n  } else {\n    nbaDate += `${state.date}`;\n    mlbDate += `${state.date}`;\n  }\n\n  // control whether nba games should be shown\n  const [showNba, setShowNba] = useState<boolean | null>(null);\n\n  // control whether mlb games should be shown\n  const [showMlb, setShowMlb] = useState<boolean | null>(null);\n\n  // get nba games\n  useEffect(() => {\n    const asyncGetAllGames = async () => {\n      const response = await getAllGames(nbaDate);\n      setNbaGamesOnDate(response && response.data.response);\n    };\n    asyncGetAllGames();\n  }, [nbaDate]);\n\n  useEffect(() => {\n    // control whether nba games should be shown\n    if (props.showSport === \"basketball\" || props.showSport === \"all\") {\n      if (nbaGamesOnDate && Object.values(nbaGamesOnDate).length) {\n        setShowNba(true);\n      } else {\n        setShowNba(false);\n      }\n    } else {\n      setShowNba(false);\n    }\n  }, [props.showSport, nbaDate, nbaGamesOnDate]);\n\n  // useEffect(() => {\n  //   const asyncGetMlbGames = async () => {\n  //     const response = await getMlbGames(mlbDate);\n  //     // setMlbGamesOnDate(response && response?.data?.body);\n  //     console.log(response);\n  //   };\n  //   asyncGetMlbGames();\n  // }, [mlbDate]);\n\n  useEffect(() => {\n    // control whether mlb games should be shown\n    if (props.showSport === \"baseball\" || props.showSport === \"all\") {\n      if (mlbGamesOnDate && Object.values(mlbGamesOnDate)[0]) {\n        setShowMlb(true);\n      }\n    }\n  }, [props.showSport, mlbGamesOnDate]);\n  return (\n    <div\n      className={clsx(\n        { [styles.noShow]: props.showMobileIcon === \"leagues\" },\n        styles.middleSection\n      )}\n    >\n      <h3 className={styles.middleTitle} ref={props.middleSecRef}>\n        {props.showFavorites ? \"Favorite teams games\" : \"Pinned Games\"}\n      </h3>\n      {/* dummy data不管輸入資料是否正確，都會render，因此這邊需要判斷式來比對是否當天有資料 */}\n      {showNba &&\n      nbaGamesOnDate &&\n      mlbDate === \"20230718\" &&\n      dummyMlbGames &&\n      props.showSport === \"all\" ? (\n        <div>\n          <LeagueNbaPlayed\n            nbaGames={nbaGamesOnDate}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n          <LeagueMlbPlayed\n            mlbGames={dummyMlbGames}\n            showSport={props.showSport}\n            showFavorites={props.showFavorites}\n          />\n        </div>\n      ) : showNba && nbaGamesOnDate ? (\n        <LeagueNbaPlayed\n          nbaGames={nbaGamesOnDate}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : mlbDate === \"20230718\" &&\n        dummyMlbGames &&\n        (props.showSport === \"baseball\" || props.showSport === \"all\") ? (\n        <LeagueMlbPlayed\n          mlbGames={dummyMlbGames}\n          showSport={props.showSport}\n          showFavorites={props.showFavorites}\n        />\n      ) : (\n        <div className={styles.noEventsWrapper}>\n          <img\n            src=\"https://www.sofascore.com/static/images/empty_state/empty-state-no-events-1.svg\"\n            alt=\"noEvent.svg\"\n          />\n          <h2 className={styles.emptyData}>No Events</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}