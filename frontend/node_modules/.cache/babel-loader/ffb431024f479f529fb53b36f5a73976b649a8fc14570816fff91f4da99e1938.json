{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/sutaoliang/live-score/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import RightSection from\"components/leagueInfo/leagueInfoComponents/RightSection\";import LeftSection from\"./teamInfoComponents/LeftSection\";import{useState,useEffect,useRef}from\"react\";import{useParams}from\"react-router-dom\";import{getgamePerSeasonPerTeam,getTeam}from\"api/nba\";import{dummyMlbTeamMatches}from\"./dummyMlbTeamMatches\";import{dummyMlbTeams}from\"./dummyMlbTeams\";import styles from\"./TeamInfo.module.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function TeamInfo(){var id=useParams().teamId;var league=useParams().league;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),nbaAllSeasonGames=_useState2[0],setNbaAllSeasonGames=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),mlbAllSeasonGames=_useState4[0],setMlbAllSeasonGames=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),teamFullName=_useState6[0],setTeamFullName=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),mlbTeamInfo=_useState8[0],setMlbTeamInfo=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),teamLogo=_useState10[0],setTeamLogo=_useState10[1];var _useState11=useState(null),_useState12=_slicedToArray(_useState11,2),arenaInfo=_useState12[0],setArenaInfo=_useState12[1];var defaultLogo=\"https://www.svgrepo.com/show/133513/shield.svg\";var teamNicknameRef=useRef(null);// get current year\nvar date=new Date();var currYear=date.getFullYear();var season=\"\";switch(league){case\"nba\":{season=\"\".concat(currYear-1);break;}case\"mlb\":{season=\"\".concat(currYear);break;}}// declare id and arena info, needs to find the matching home id from nbaAllSeasonGames/mlbAllSeasonGames in order to find team information\nvar index=0;var homeIdRef=useRef(0);// get nab all games per season per team\nuseEffect(function(){var asyncGetgamePerSeasonPerTeam=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.t0=id;if(!_context.t0){_context.next=5;break;}_context.next=4;return getgamePerSeasonPerTeam(season,id);case 4:_context.t0=_context.sent;case 5:response=_context.t0;setNbaAllSeasonGames(response&&response.data.response);case 7:case\"end\":return _context.stop();}},_callee);}));return function asyncGetgamePerSeasonPerTeam(){return _ref.apply(this,arguments);};}();if(league===\"nba\")asyncGetgamePerSeasonPerTeam();},[id,league,season]);// find nba matching home id for team info\nuseEffect(function(){if(league===\"nba\"&&nbaAllSeasonGames){var _nbaAllSeasonGames$in,_nbaAllSeasonGames$in2,_nbaAllSeasonGames$in3;homeIdRef.current=nbaAllSeasonGames&&((_nbaAllSeasonGames$in=nbaAllSeasonGames[index])===null||_nbaAllSeasonGames$in===void 0?void 0:(_nbaAllSeasonGames$in2=_nbaAllSeasonGames$in.teams)===null||_nbaAllSeasonGames$in2===void 0?void 0:(_nbaAllSeasonGames$in3=_nbaAllSeasonGames$in2.home)===null||_nbaAllSeasonGames$in3===void 0?void 0:_nbaAllSeasonGames$in3.id);while(homeIdRef.current!==Number(id)||(_nbaAllSeasonGames$in4=nbaAllSeasonGames[index].arena)!==null&&_nbaAllSeasonGames$in4!==void 0&&_nbaAllSeasonGames$in4.country){var _nbaAllSeasonGames$in4,_nbaAllSeasonGames$in5,_nbaAllSeasonGames$in6,_nbaAllSeasonGames$in7;index++;homeIdRef.current=(_nbaAllSeasonGames$in5=nbaAllSeasonGames[index])===null||_nbaAllSeasonGames$in5===void 0?void 0:(_nbaAllSeasonGames$in6=_nbaAllSeasonGames$in5.teams)===null||_nbaAllSeasonGames$in6===void 0?void 0:(_nbaAllSeasonGames$in7=_nbaAllSeasonGames$in6.home)===null||_nbaAllSeasonGames$in7===void 0?void 0:_nbaAllSeasonGames$in7.id;if(index>87){break;}}// if find the matched id, set arena info\nif(homeIdRef.current===Number(id)){var _nbaAllSeasonGames$in8;setArenaInfo((_nbaAllSeasonGames$in8=nbaAllSeasonGames[index])===null||_nbaAllSeasonGames$in8===void 0?void 0:_nbaAllSeasonGames$in8.arena);}else{setArenaInfo(null);}}},[id,index,league,nbaAllSeasonGames]);// get nba team\nuseEffect(function(){var asyncGetTeam=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.t0=id;if(!_context2.t0){_context2.next=5;break;}_context2.next=4;return getTeam(Number(id));case 4:_context2.t0=_context2.sent;case 5:response=_context2.t0;response&&setTeamFullName(response.data.response[0].name);response&&localStorage.setItem(\"teamFullName\",response.data.response[0].name);if(response&&response.data.response[0].logo){setTeamLogo(response.data.response[0].logo?response.data.response[0].logo:defaultLogo);teamNicknameRef.current=response&&response.data.response[0].nickname;}else{setTeamLogo(defaultLogo);}case 9:case\"end\":return _context2.stop();}},_callee2);}));return function asyncGetTeam(){return _ref2.apply(this,arguments);};}();if(league===\"nba\"){asyncGetTeam();}},[league,id,index]);// get mlb all games per season per team\nuseEffect(function(){setMlbAllSeasonGames(dummyMlbTeamMatches);},[league,id]);// get mlb team info: fullname/logo\nuseEffect(function(){if(league===\"mlb\"){homeIdRef.current=dummyMlbTeams[index].teamID;while(homeIdRef.current!==id){index++;homeIdRef.current=dummyMlbTeams[index].teamID;if(index>29){break;}}setTeamLogo(dummyMlbTeams[index].mlbLogo1);setTeamFullName(\"\".concat(dummyMlbTeams[index].teamCity,\" \").concat(dummyMlbTeams[index].teamName));setMlbTeamInfo(dummyMlbTeams[index]);teamNicknameRef.current=dummyMlbTeams[index].teamAbv;}},[league,id,index]);return/*#__PURE__*/_jsxs(\"div\",{className:styles.teamInfo,children:[/*#__PURE__*/_jsx(LeftSection,{teamFullName:teamFullName,teamNickname:teamNicknameRef.current,arena:arenaInfo===null||arenaInfo===void 0?void 0:arenaInfo.name,city:league===\"nba\"?arenaInfo===null||arenaInfo===void 0?void 0:arenaInfo.city:mlbTeamInfo===null||mlbTeamInfo===void 0?void 0:mlbTeamInfo.teamCity,state:arenaInfo===null||arenaInfo===void 0?void 0:arenaInfo.state,matches:league===\"nba\"?nbaAllSeasonGames:mlbAllSeasonGames===null||mlbAllSeasonGames===void 0?void 0:mlbAllSeasonGames.schedule,season:season,league:league,DIFF:mlbTeamInfo===null||mlbTeamInfo===void 0?void 0:mlbTeamInfo.DIFF,conference:mlbTeamInfo===null||mlbTeamInfo===void 0?void 0:mlbTeamInfo.conference,teamLogo:teamLogo}),/*#__PURE__*/_jsx(RightSection,{matches:league===\"nba\"?nbaAllSeasonGames:mlbAllSeasonGames===null||mlbAllSeasonGames===void 0?void 0:mlbAllSeasonGames.schedule,league:league})]});}","map":{"version":3,"names":["RightSection","LeftSection","useState","useEffect","useRef","useParams","getgamePerSeasonPerTeam","getTeam","dummyMlbTeamMatches","dummyMlbTeams","styles","jsx","_jsx","jsxs","_jsxs","TeamInfo","id","teamId","league","_useState","_useState2","_slicedToArray","nbaAllSeasonGames","setNbaAllSeasonGames","_useState3","_useState4","mlbAllSeasonGames","setMlbAllSeasonGames","_useState5","_useState6","teamFullName","setTeamFullName","_useState7","_useState8","mlbTeamInfo","setMlbTeamInfo","_useState9","_useState10","teamLogo","setTeamLogo","_useState11","_useState12","arenaInfo","setArenaInfo","defaultLogo","teamNicknameRef","date","Date","currYear","getFullYear","season","concat","index","homeIdRef","asyncGetgamePerSeasonPerTeam","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","t0","sent","data","stop","apply","arguments","_nbaAllSeasonGames$in","_nbaAllSeasonGames$in2","_nbaAllSeasonGames$in3","current","teams","home","Number","_nbaAllSeasonGames$in4","arena","country","_nbaAllSeasonGames$in5","_nbaAllSeasonGames$in6","_nbaAllSeasonGames$in7","_nbaAllSeasonGames$in8","asyncGetTeam","_ref2","_callee2","_callee2$","_context2","name","localStorage","setItem","logo","nickname","teamID","mlbLogo1","teamCity","teamName","teamAbv","className","teamInfo","children","teamNickname","city","state","matches","schedule","DIFF","conference"],"sources":["/Users/sutaoliang/live-score/frontend/src/components/teamInfo/TeamInfo.tsx"],"sourcesContent":["import RightSection from \"components/leagueInfo/leagueInfoComponents/RightSection\";\nimport LeftSection from \"./teamInfoComponents/LeftSection\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getgamePerSeasonPerTeam, getTeam } from \"api/nba\";\nimport {\n  nbaMatchItemProps,\n  mlbMatchItem,\n  arena,\n  teamInfoType,\n} from \"types/types\";\nimport { dummyMlbTeamMatches } from \"./dummyMlbTeamMatches\";\nimport { dummyMlbTeams } from \"./dummyMlbTeams\";\nimport styles from \"./TeamInfo.module.scss\";\n\nexport default function TeamInfo() {\n  const id = useParams().teamId;\n  const league = useParams().league;\n  const [nbaAllSeasonGames, setNbaAllSeasonGames] = useState<\n    null | nbaMatchItemProps[]\n  >(null);\n  const [mlbAllSeasonGames, setMlbAllSeasonGames] =\n    useState<null | mlbMatchItem>(null);\n  const [teamFullName, setTeamFullName] = useState<null | string>(null);\n  const [mlbTeamInfo, setMlbTeamInfo] = useState<teamInfoType | null>(null);\n  const [teamLogo, setTeamLogo] = useState<string | undefined>(\"\");\n  const [arenaInfo, setArenaInfo] = useState<arena | undefined | null>(null);\n  const defaultLogo = \"https://www.svgrepo.com/show/133513/shield.svg\";\n  const teamNicknameRef = useRef<null | string | undefined>(null);\n\n  // get current year\n  const date = new Date();\n  const currYear = date.getFullYear();\n  let season = \"\";\n  switch (league) {\n    case \"nba\": {\n      season = `${currYear - 1}`;\n      break;\n    }\n    case \"mlb\": {\n      season = `${currYear}`;\n      break;\n    }\n  }\n\n  // declare id and arena info, needs to find the matching home id from nbaAllSeasonGames/mlbAllSeasonGames in order to find team information\n  let index = 0;\n  const homeIdRef = useRef<number | string | undefined | null>(0);\n\n  // get nab all games per season per team\n  useEffect(() => {\n    const asyncGetgamePerSeasonPerTeam = async () => {\n      const response = id && (await getgamePerSeasonPerTeam(season, id));\n      setNbaAllSeasonGames(response && response.data.response);\n    };\n    if (league === \"nba\") asyncGetgamePerSeasonPerTeam();\n  }, [id, league, season]);\n\n  // find nba matching home id for team info\n  useEffect(() => {\n    if (league === \"nba\" && nbaAllSeasonGames) {\n      homeIdRef.current =\n        nbaAllSeasonGames && nbaAllSeasonGames[index]?.teams?.home?.id;\n      while (\n        homeIdRef.current !== Number(id) ||\n        nbaAllSeasonGames[index].arena?.country\n      ) {\n        index++;\n        homeIdRef.current = nbaAllSeasonGames[index]?.teams?.home?.id;\n        if (index > 87) {\n          break;\n        }\n      }\n      // if find the matched id, set arena info\n      if (homeIdRef.current === Number(id)) {\n        setArenaInfo(nbaAllSeasonGames[index]?.arena);\n      } else {\n        setArenaInfo(null);\n      }\n    }\n  }, [id, index, league, nbaAllSeasonGames]);\n\n  // get nba team\n  useEffect(() => {\n    const asyncGetTeam = async () => {\n      const response = id && (await getTeam(Number(id)));\n      response && setTeamFullName(response.data.response[0].name);\n      response &&\n        localStorage.setItem(\"teamFullName\", response.data.response[0].name);\n      if (response && response.data.response[0].logo) {\n        setTeamLogo(\n          response.data.response[0].logo\n            ? response.data.response[0].logo\n            : defaultLogo\n        );\n        teamNicknameRef.current =\n          response && response.data.response[0].nickname;\n      } else {\n        setTeamLogo(defaultLogo);\n      }\n    };\n    if (league === \"nba\") {\n      asyncGetTeam();\n    }\n  }, [league, id, index]);\n\n  // get mlb all games per season per team\n  useEffect(() => {\n    setMlbAllSeasonGames(dummyMlbTeamMatches);\n  }, [league, id]);\n\n  // get mlb team info: fullname/logo\n  useEffect(() => {\n    if (league === \"mlb\") {\n      homeIdRef.current = dummyMlbTeams[index].teamID;\n      while (homeIdRef.current !== id) {\n        index++;\n        homeIdRef.current = dummyMlbTeams[index].teamID;\n        if (index > 29) {\n          break;\n        }\n      }\n      setTeamLogo(dummyMlbTeams[index].mlbLogo1);\n      setTeamFullName(\n        `${dummyMlbTeams[index].teamCity} ${dummyMlbTeams[index].teamName}`\n      );\n      setMlbTeamInfo(dummyMlbTeams[index]);\n      teamNicknameRef.current = dummyMlbTeams[index].teamAbv;\n    }\n  }, [league, id, index]);\n\n  return (\n    <div className={styles.teamInfo}>\n      <LeftSection\n        teamFullName={teamFullName}\n        teamNickname={teamNicknameRef.current}\n        arena={arenaInfo?.name}\n        city={league === \"nba\" ? arenaInfo?.city : mlbTeamInfo?.teamCity}\n        state={arenaInfo?.state}\n        matches={\n          league === \"nba\" ? nbaAllSeasonGames : mlbAllSeasonGames?.schedule\n        }\n        season={season}\n        league={league}\n        DIFF={mlbTeamInfo?.DIFF}\n        conference={mlbTeamInfo?.conference}\n        teamLogo={teamLogo}\n      />\n      <RightSection\n        matches={\n          league === \"nba\" ? nbaAllSeasonGames : mlbAllSeasonGames?.schedule\n        }\n        league={league}\n      />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}