{"ast":null,"code":"import axios from \"axios\";\nconst base_url = \"https://livescore-2f15c0310cf4.herokuapp.com/api\";\n\n// get all nba games on date\nexport const getAllGames = async date => {\n  try {\n    const response = await axios.get(`${base_url}/date/${date}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET all games failed]: \", error);\n  }\n};\nexport const getLiveGames = async () => {\n  try {\n    const response = await axios.get(`${base_url}/live/all`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET all live games filed: ]\", error);\n  }\n};\n\n// get team information\nexport const getTeam = async id => {\n  try {\n    const response = await axios.get(`${base_url}/teams/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET team failed]: \", error);\n  }\n};\nexport const getgamePerSeasonPerTeam = async (season, teamId) => {\n  try {\n    const response = await axios.get(`${base_url}/gamesPerTeamAndSeason/${season}/${teamId}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET games per season/team failed]: \", error);\n  }\n};\n\n//get teams per conference\nexport const getTeamsConference = async conference => {\n  try {\n    const response = await axios.get(`${base_url}/teams/${conference}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET team per conference failed]: \", error);\n  }\n};\n\n// get teams standing\nexport const getTeamsStandings = async (league, season, conference) => {\n  try {\n    const response = await axios.get(`${base_url}/standing/${league}/${season}/${conference}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET teams standing failed]: \", error);\n  }\n};\n\n// get match info\nexport const getMatchInfo = async id => {\n  try {\n    const response = await axios.get(`${base_url}/game/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET match info failed: ]\", error);\n  }\n};\n\n// get match stats\nexport const getMatchStats = async id => {\n  try {\n    const response = await axios.get(`${base_url}/stats/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET match stats failed: ]\", error);\n  }\n};","map":{"version":3,"names":["axios","base_url","getAllGames","date","response","get","console","log","error","getLiveGames","getTeam","id","getgamePerSeasonPerTeam","season","teamId","getTeamsConference","conference","getTeamsStandings","league","getMatchInfo","getMatchStats"],"sources":["/Users/sutaoliang/livescore/src/api/nba.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst base_url = \"https://livescore-2f15c0310cf4.herokuapp.com/api\";\n\n// get all nba games on date\nexport const getAllGames = async (date: string) => {\n  try {\n    const response = await axios.get(`${base_url}/date/${date}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET all games failed]: \", error);\n  }\n};\n\nexport const getLiveGames = async () => {\n  try {\n    const response = await axios.get(`${base_url}/live/all`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET all live games filed: ]\", error);\n  }\n};\n\n// get team information\nexport const getTeam = async (id: number | string) => {\n  try {\n    const response = await axios.get(`${base_url}/teams/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET team failed]: \", error);\n  }\n};\n\nexport const getgamePerSeasonPerTeam = async (\n  season: number | string,\n  teamId: number | string\n) => {\n  try {\n    const response = await axios.get(\n      `${base_url}/gamesPerTeamAndSeason/${season}/${teamId}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET games per season/team failed]: \", error);\n  }\n};\n\n//get teams per conference\nexport const getTeamsConference = async (conference: string) => {\n  try {\n    const response = await axios.get(`${base_url}/teams/${conference}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET team per conference failed]: \", error);\n  }\n};\n\n// get teams standing\nexport const getTeamsStandings = async (\n  league: string,\n  season: string,\n  conference: string\n) => {\n  try {\n    const response = await axios.get(\n      `${base_url}/standing/${league}/${season}/${conference}`\n    );\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET teams standing failed]: \", error);\n  }\n};\n\n// get match info\nexport const getMatchInfo = async (id: number) => {\n  try {\n    const response = await axios.get(`${base_url}/game/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET match info failed: ]\", error);\n  }\n};\n\n// get match stats\nexport const getMatchStats = async (id: number) => {\n  try {\n    const response = await axios.get(`${base_url}/stats/${id}`);\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error(\"[GET match stats failed: ]\", error);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}